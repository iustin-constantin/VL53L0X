
VL53L0X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000253c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080025fc  080025fc  000125fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800263c  0800263c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800263c  0800263c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800263c  0800263c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002640  08002640  00012640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000018  0800265c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  0800265c  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040c7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a2d  00000000  00000000  00024107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00024b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b0  00000000  00000000  00024d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a387  00000000  00000000  00024ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000249c  00000000  00000000  0002f267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003374c  00000000  00000000  00031703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00064e4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000868  00000000  00000000  00064ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025e4 	.word	0x080025e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080025e4 	.word	0x080025e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fcf3 	bl	8000c1c <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fc3d 	bl	8000ac0 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fce5 	bl	8000c1c <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fcdb 	bl	8000c1c <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fc5f 	bl	8000b38 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fc55 	bl	8000b38 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f8bf 	bl	8000428 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f843 	bl	8000340 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f8b1 	bl	8000428 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f8a7 	bl	8000428 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f851 	bl	8000390 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f847 	bl	8000390 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_f2uiz>:
 8000310:	219e      	movs	r1, #158	; 0x9e
 8000312:	b510      	push	{r4, lr}
 8000314:	05c9      	lsls	r1, r1, #23
 8000316:	1c04      	adds	r4, r0, #0
 8000318:	f7ff fff0 	bl	80002fc <__aeabi_fcmpge>
 800031c:	2800      	cmp	r0, #0
 800031e:	d103      	bne.n	8000328 <__aeabi_f2uiz+0x18>
 8000320:	1c20      	adds	r0, r4, #0
 8000322:	f000 fbad 	bl	8000a80 <__aeabi_f2iz>
 8000326:	bd10      	pop	{r4, pc}
 8000328:	219e      	movs	r1, #158	; 0x9e
 800032a:	1c20      	adds	r0, r4, #0
 800032c:	05c9      	lsls	r1, r1, #23
 800032e:	f000 f9df 	bl	80006f0 <__aeabi_fsub>
 8000332:	f000 fba5 	bl	8000a80 <__aeabi_f2iz>
 8000336:	2380      	movs	r3, #128	; 0x80
 8000338:	061b      	lsls	r3, r3, #24
 800033a:	469c      	mov	ip, r3
 800033c:	4460      	add	r0, ip
 800033e:	e7f2      	b.n	8000326 <__aeabi_f2uiz+0x16>

08000340 <__eqsf2>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	0042      	lsls	r2, r0, #1
 8000344:	024e      	lsls	r6, r1, #9
 8000346:	004c      	lsls	r4, r1, #1
 8000348:	0245      	lsls	r5, r0, #9
 800034a:	0a6d      	lsrs	r5, r5, #9
 800034c:	0e12      	lsrs	r2, r2, #24
 800034e:	0fc3      	lsrs	r3, r0, #31
 8000350:	0a76      	lsrs	r6, r6, #9
 8000352:	0e24      	lsrs	r4, r4, #24
 8000354:	0fc9      	lsrs	r1, r1, #31
 8000356:	2aff      	cmp	r2, #255	; 0xff
 8000358:	d00f      	beq.n	800037a <__eqsf2+0x3a>
 800035a:	2cff      	cmp	r4, #255	; 0xff
 800035c:	d011      	beq.n	8000382 <__eqsf2+0x42>
 800035e:	2001      	movs	r0, #1
 8000360:	42a2      	cmp	r2, r4
 8000362:	d000      	beq.n	8000366 <__eqsf2+0x26>
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	42b5      	cmp	r5, r6
 8000368:	d1fc      	bne.n	8000364 <__eqsf2+0x24>
 800036a:	428b      	cmp	r3, r1
 800036c:	d00d      	beq.n	800038a <__eqsf2+0x4a>
 800036e:	2a00      	cmp	r2, #0
 8000370:	d1f8      	bne.n	8000364 <__eqsf2+0x24>
 8000372:	0028      	movs	r0, r5
 8000374:	1e45      	subs	r5, r0, #1
 8000376:	41a8      	sbcs	r0, r5
 8000378:	e7f4      	b.n	8000364 <__eqsf2+0x24>
 800037a:	2001      	movs	r0, #1
 800037c:	2d00      	cmp	r5, #0
 800037e:	d1f1      	bne.n	8000364 <__eqsf2+0x24>
 8000380:	e7eb      	b.n	800035a <__eqsf2+0x1a>
 8000382:	2001      	movs	r0, #1
 8000384:	2e00      	cmp	r6, #0
 8000386:	d1ed      	bne.n	8000364 <__eqsf2+0x24>
 8000388:	e7e9      	b.n	800035e <__eqsf2+0x1e>
 800038a:	2000      	movs	r0, #0
 800038c:	e7ea      	b.n	8000364 <__eqsf2+0x24>
 800038e:	46c0      	nop			; (mov r8, r8)

08000390 <__gesf2>:
 8000390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000392:	0042      	lsls	r2, r0, #1
 8000394:	0246      	lsls	r6, r0, #9
 8000396:	024d      	lsls	r5, r1, #9
 8000398:	004c      	lsls	r4, r1, #1
 800039a:	0fc3      	lsrs	r3, r0, #31
 800039c:	0a76      	lsrs	r6, r6, #9
 800039e:	0e12      	lsrs	r2, r2, #24
 80003a0:	0a6d      	lsrs	r5, r5, #9
 80003a2:	0e24      	lsrs	r4, r4, #24
 80003a4:	0fc8      	lsrs	r0, r1, #31
 80003a6:	2aff      	cmp	r2, #255	; 0xff
 80003a8:	d01f      	beq.n	80003ea <__gesf2+0x5a>
 80003aa:	2cff      	cmp	r4, #255	; 0xff
 80003ac:	d010      	beq.n	80003d0 <__gesf2+0x40>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d11f      	bne.n	80003f2 <__gesf2+0x62>
 80003b2:	4271      	negs	r1, r6
 80003b4:	4171      	adcs	r1, r6
 80003b6:	2c00      	cmp	r4, #0
 80003b8:	d101      	bne.n	80003be <__gesf2+0x2e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d01e      	beq.n	80003fc <__gesf2+0x6c>
 80003be:	2900      	cmp	r1, #0
 80003c0:	d10e      	bne.n	80003e0 <__gesf2+0x50>
 80003c2:	4283      	cmp	r3, r0
 80003c4:	d01e      	beq.n	8000404 <__gesf2+0x74>
 80003c6:	2102      	movs	r1, #2
 80003c8:	1e58      	subs	r0, r3, #1
 80003ca:	4008      	ands	r0, r1
 80003cc:	3801      	subs	r0, #1
 80003ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d0:	2d00      	cmp	r5, #0
 80003d2:	d126      	bne.n	8000422 <__gesf2+0x92>
 80003d4:	2a00      	cmp	r2, #0
 80003d6:	d1f4      	bne.n	80003c2 <__gesf2+0x32>
 80003d8:	4271      	negs	r1, r6
 80003da:	4171      	adcs	r1, r6
 80003dc:	2900      	cmp	r1, #0
 80003de:	d0f0      	beq.n	80003c2 <__gesf2+0x32>
 80003e0:	2800      	cmp	r0, #0
 80003e2:	d1f4      	bne.n	80003ce <__gesf2+0x3e>
 80003e4:	2001      	movs	r0, #1
 80003e6:	4240      	negs	r0, r0
 80003e8:	e7f1      	b.n	80003ce <__gesf2+0x3e>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d119      	bne.n	8000422 <__gesf2+0x92>
 80003ee:	2cff      	cmp	r4, #255	; 0xff
 80003f0:	d0ee      	beq.n	80003d0 <__gesf2+0x40>
 80003f2:	2c00      	cmp	r4, #0
 80003f4:	d1e5      	bne.n	80003c2 <__gesf2+0x32>
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d1e3      	bne.n	80003c2 <__gesf2+0x32>
 80003fa:	e7e4      	b.n	80003c6 <__gesf2+0x36>
 80003fc:	2000      	movs	r0, #0
 80003fe:	2e00      	cmp	r6, #0
 8000400:	d0e5      	beq.n	80003ce <__gesf2+0x3e>
 8000402:	e7e0      	b.n	80003c6 <__gesf2+0x36>
 8000404:	42a2      	cmp	r2, r4
 8000406:	dc05      	bgt.n	8000414 <__gesf2+0x84>
 8000408:	dbea      	blt.n	80003e0 <__gesf2+0x50>
 800040a:	42ae      	cmp	r6, r5
 800040c:	d802      	bhi.n	8000414 <__gesf2+0x84>
 800040e:	d3e7      	bcc.n	80003e0 <__gesf2+0x50>
 8000410:	2000      	movs	r0, #0
 8000412:	e7dc      	b.n	80003ce <__gesf2+0x3e>
 8000414:	4241      	negs	r1, r0
 8000416:	4141      	adcs	r1, r0
 8000418:	4248      	negs	r0, r1
 800041a:	2102      	movs	r1, #2
 800041c:	4008      	ands	r0, r1
 800041e:	3801      	subs	r0, #1
 8000420:	e7d5      	b.n	80003ce <__gesf2+0x3e>
 8000422:	2002      	movs	r0, #2
 8000424:	4240      	negs	r0, r0
 8000426:	e7d2      	b.n	80003ce <__gesf2+0x3e>

08000428 <__lesf2>:
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	0042      	lsls	r2, r0, #1
 800042c:	0246      	lsls	r6, r0, #9
 800042e:	024d      	lsls	r5, r1, #9
 8000430:	004c      	lsls	r4, r1, #1
 8000432:	0fc3      	lsrs	r3, r0, #31
 8000434:	0a76      	lsrs	r6, r6, #9
 8000436:	0e12      	lsrs	r2, r2, #24
 8000438:	0a6d      	lsrs	r5, r5, #9
 800043a:	0e24      	lsrs	r4, r4, #24
 800043c:	0fc8      	lsrs	r0, r1, #31
 800043e:	2aff      	cmp	r2, #255	; 0xff
 8000440:	d00d      	beq.n	800045e <__lesf2+0x36>
 8000442:	2cff      	cmp	r4, #255	; 0xff
 8000444:	d00f      	beq.n	8000466 <__lesf2+0x3e>
 8000446:	2a00      	cmp	r2, #0
 8000448:	d123      	bne.n	8000492 <__lesf2+0x6a>
 800044a:	4271      	negs	r1, r6
 800044c:	4171      	adcs	r1, r6
 800044e:	2c00      	cmp	r4, #0
 8000450:	d10f      	bne.n	8000472 <__lesf2+0x4a>
 8000452:	2d00      	cmp	r5, #0
 8000454:	d10d      	bne.n	8000472 <__lesf2+0x4a>
 8000456:	2000      	movs	r0, #0
 8000458:	2e00      	cmp	r6, #0
 800045a:	d014      	beq.n	8000486 <__lesf2+0x5e>
 800045c:	e00d      	b.n	800047a <__lesf2+0x52>
 800045e:	2e00      	cmp	r6, #0
 8000460:	d110      	bne.n	8000484 <__lesf2+0x5c>
 8000462:	2cff      	cmp	r4, #255	; 0xff
 8000464:	d115      	bne.n	8000492 <__lesf2+0x6a>
 8000466:	2d00      	cmp	r5, #0
 8000468:	d10c      	bne.n	8000484 <__lesf2+0x5c>
 800046a:	2a00      	cmp	r2, #0
 800046c:	d103      	bne.n	8000476 <__lesf2+0x4e>
 800046e:	4271      	negs	r1, r6
 8000470:	4171      	adcs	r1, r6
 8000472:	2900      	cmp	r1, #0
 8000474:	d108      	bne.n	8000488 <__lesf2+0x60>
 8000476:	4283      	cmp	r3, r0
 8000478:	d010      	beq.n	800049c <__lesf2+0x74>
 800047a:	2102      	movs	r1, #2
 800047c:	1e58      	subs	r0, r3, #1
 800047e:	4008      	ands	r0, r1
 8000480:	3801      	subs	r0, #1
 8000482:	e000      	b.n	8000486 <__lesf2+0x5e>
 8000484:	2002      	movs	r0, #2
 8000486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000488:	2800      	cmp	r0, #0
 800048a:	d1fc      	bne.n	8000486 <__lesf2+0x5e>
 800048c:	2001      	movs	r0, #1
 800048e:	4240      	negs	r0, r0
 8000490:	e7f9      	b.n	8000486 <__lesf2+0x5e>
 8000492:	2c00      	cmp	r4, #0
 8000494:	d1ef      	bne.n	8000476 <__lesf2+0x4e>
 8000496:	2d00      	cmp	r5, #0
 8000498:	d1ed      	bne.n	8000476 <__lesf2+0x4e>
 800049a:	e7ee      	b.n	800047a <__lesf2+0x52>
 800049c:	42a2      	cmp	r2, r4
 800049e:	dc05      	bgt.n	80004ac <__lesf2+0x84>
 80004a0:	dbf2      	blt.n	8000488 <__lesf2+0x60>
 80004a2:	42ae      	cmp	r6, r5
 80004a4:	d802      	bhi.n	80004ac <__lesf2+0x84>
 80004a6:	d3ef      	bcc.n	8000488 <__lesf2+0x60>
 80004a8:	2000      	movs	r0, #0
 80004aa:	e7ec      	b.n	8000486 <__lesf2+0x5e>
 80004ac:	4241      	negs	r1, r0
 80004ae:	4141      	adcs	r1, r0
 80004b0:	4248      	negs	r0, r1
 80004b2:	2102      	movs	r1, #2
 80004b4:	4008      	ands	r0, r1
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e5      	b.n	8000486 <__lesf2+0x5e>
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fmul>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	4657      	mov	r7, sl
 80004c0:	464e      	mov	r6, r9
 80004c2:	4645      	mov	r5, r8
 80004c4:	46de      	mov	lr, fp
 80004c6:	0244      	lsls	r4, r0, #9
 80004c8:	b5e0      	push	{r5, r6, r7, lr}
 80004ca:	0045      	lsls	r5, r0, #1
 80004cc:	1c0f      	adds	r7, r1, #0
 80004ce:	0a64      	lsrs	r4, r4, #9
 80004d0:	0e2d      	lsrs	r5, r5, #24
 80004d2:	0fc6      	lsrs	r6, r0, #31
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d047      	beq.n	8000568 <__aeabi_fmul+0xac>
 80004d8:	2dff      	cmp	r5, #255	; 0xff
 80004da:	d04d      	beq.n	8000578 <__aeabi_fmul+0xbc>
 80004dc:	2300      	movs	r3, #0
 80004de:	2080      	movs	r0, #128	; 0x80
 80004e0:	469a      	mov	sl, r3
 80004e2:	469b      	mov	fp, r3
 80004e4:	00e4      	lsls	r4, r4, #3
 80004e6:	04c0      	lsls	r0, r0, #19
 80004e8:	4304      	orrs	r4, r0
 80004ea:	3d7f      	subs	r5, #127	; 0x7f
 80004ec:	0278      	lsls	r0, r7, #9
 80004ee:	0a43      	lsrs	r3, r0, #9
 80004f0:	4699      	mov	r9, r3
 80004f2:	007a      	lsls	r2, r7, #1
 80004f4:	0ffb      	lsrs	r3, r7, #31
 80004f6:	4698      	mov	r8, r3
 80004f8:	0e12      	lsrs	r2, r2, #24
 80004fa:	464b      	mov	r3, r9
 80004fc:	d044      	beq.n	8000588 <__aeabi_fmul+0xcc>
 80004fe:	2aff      	cmp	r2, #255	; 0xff
 8000500:	d011      	beq.n	8000526 <__aeabi_fmul+0x6a>
 8000502:	00d8      	lsls	r0, r3, #3
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	04db      	lsls	r3, r3, #19
 8000508:	4303      	orrs	r3, r0
 800050a:	4699      	mov	r9, r3
 800050c:	2000      	movs	r0, #0
 800050e:	3a7f      	subs	r2, #127	; 0x7f
 8000510:	18ad      	adds	r5, r5, r2
 8000512:	4647      	mov	r7, r8
 8000514:	4653      	mov	r3, sl
 8000516:	4077      	eors	r7, r6
 8000518:	1c69      	adds	r1, r5, #1
 800051a:	2b0f      	cmp	r3, #15
 800051c:	d83f      	bhi.n	800059e <__aeabi_fmul+0xe2>
 800051e:	4a72      	ldr	r2, [pc, #456]	; (80006e8 <__aeabi_fmul+0x22c>)
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	58d3      	ldr	r3, [r2, r3]
 8000524:	469f      	mov	pc, r3
 8000526:	35ff      	adds	r5, #255	; 0xff
 8000528:	2b00      	cmp	r3, #0
 800052a:	d000      	beq.n	800052e <__aeabi_fmul+0x72>
 800052c:	e079      	b.n	8000622 <__aeabi_fmul+0x166>
 800052e:	4652      	mov	r2, sl
 8000530:	2302      	movs	r3, #2
 8000532:	431a      	orrs	r2, r3
 8000534:	4692      	mov	sl, r2
 8000536:	2002      	movs	r0, #2
 8000538:	e7eb      	b.n	8000512 <__aeabi_fmul+0x56>
 800053a:	4647      	mov	r7, r8
 800053c:	464c      	mov	r4, r9
 800053e:	4683      	mov	fp, r0
 8000540:	465b      	mov	r3, fp
 8000542:	2b02      	cmp	r3, #2
 8000544:	d028      	beq.n	8000598 <__aeabi_fmul+0xdc>
 8000546:	2b03      	cmp	r3, #3
 8000548:	d100      	bne.n	800054c <__aeabi_fmul+0x90>
 800054a:	e0c6      	b.n	80006da <__aeabi_fmul+0x21e>
 800054c:	2b01      	cmp	r3, #1
 800054e:	d14f      	bne.n	80005f0 <__aeabi_fmul+0x134>
 8000550:	2000      	movs	r0, #0
 8000552:	2400      	movs	r4, #0
 8000554:	05c0      	lsls	r0, r0, #23
 8000556:	07ff      	lsls	r7, r7, #31
 8000558:	4320      	orrs	r0, r4
 800055a:	4338      	orrs	r0, r7
 800055c:	bcf0      	pop	{r4, r5, r6, r7}
 800055e:	46bb      	mov	fp, r7
 8000560:	46b2      	mov	sl, r6
 8000562:	46a9      	mov	r9, r5
 8000564:	46a0      	mov	r8, r4
 8000566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000568:	2c00      	cmp	r4, #0
 800056a:	d171      	bne.n	8000650 <__aeabi_fmul+0x194>
 800056c:	2304      	movs	r3, #4
 800056e:	469a      	mov	sl, r3
 8000570:	3b03      	subs	r3, #3
 8000572:	2500      	movs	r5, #0
 8000574:	469b      	mov	fp, r3
 8000576:	e7b9      	b.n	80004ec <__aeabi_fmul+0x30>
 8000578:	2c00      	cmp	r4, #0
 800057a:	d163      	bne.n	8000644 <__aeabi_fmul+0x188>
 800057c:	2308      	movs	r3, #8
 800057e:	469a      	mov	sl, r3
 8000580:	3b06      	subs	r3, #6
 8000582:	25ff      	movs	r5, #255	; 0xff
 8000584:	469b      	mov	fp, r3
 8000586:	e7b1      	b.n	80004ec <__aeabi_fmul+0x30>
 8000588:	2b00      	cmp	r3, #0
 800058a:	d150      	bne.n	800062e <__aeabi_fmul+0x172>
 800058c:	4652      	mov	r2, sl
 800058e:	3301      	adds	r3, #1
 8000590:	431a      	orrs	r2, r3
 8000592:	4692      	mov	sl, r2
 8000594:	2001      	movs	r0, #1
 8000596:	e7bc      	b.n	8000512 <__aeabi_fmul+0x56>
 8000598:	20ff      	movs	r0, #255	; 0xff
 800059a:	2400      	movs	r4, #0
 800059c:	e7da      	b.n	8000554 <__aeabi_fmul+0x98>
 800059e:	4648      	mov	r0, r9
 80005a0:	0c26      	lsrs	r6, r4, #16
 80005a2:	0424      	lsls	r4, r4, #16
 80005a4:	0c22      	lsrs	r2, r4, #16
 80005a6:	0404      	lsls	r4, r0, #16
 80005a8:	0c24      	lsrs	r4, r4, #16
 80005aa:	464b      	mov	r3, r9
 80005ac:	0020      	movs	r0, r4
 80005ae:	0c1b      	lsrs	r3, r3, #16
 80005b0:	4350      	muls	r0, r2
 80005b2:	4374      	muls	r4, r6
 80005b4:	435a      	muls	r2, r3
 80005b6:	435e      	muls	r6, r3
 80005b8:	1912      	adds	r2, r2, r4
 80005ba:	0c03      	lsrs	r3, r0, #16
 80005bc:	189b      	adds	r3, r3, r2
 80005be:	429c      	cmp	r4, r3
 80005c0:	d903      	bls.n	80005ca <__aeabi_fmul+0x10e>
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	0252      	lsls	r2, r2, #9
 80005c6:	4694      	mov	ip, r2
 80005c8:	4466      	add	r6, ip
 80005ca:	0400      	lsls	r0, r0, #16
 80005cc:	041a      	lsls	r2, r3, #16
 80005ce:	0c00      	lsrs	r0, r0, #16
 80005d0:	1812      	adds	r2, r2, r0
 80005d2:	0194      	lsls	r4, r2, #6
 80005d4:	1e60      	subs	r0, r4, #1
 80005d6:	4184      	sbcs	r4, r0
 80005d8:	0c1b      	lsrs	r3, r3, #16
 80005da:	0e92      	lsrs	r2, r2, #26
 80005dc:	199b      	adds	r3, r3, r6
 80005de:	4314      	orrs	r4, r2
 80005e0:	019b      	lsls	r3, r3, #6
 80005e2:	431c      	orrs	r4, r3
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	d572      	bpl.n	80006ce <__aeabi_fmul+0x212>
 80005e8:	2001      	movs	r0, #1
 80005ea:	0863      	lsrs	r3, r4, #1
 80005ec:	4004      	ands	r4, r0
 80005ee:	431c      	orrs	r4, r3
 80005f0:	0008      	movs	r0, r1
 80005f2:	307f      	adds	r0, #127	; 0x7f
 80005f4:	2800      	cmp	r0, #0
 80005f6:	dd3c      	ble.n	8000672 <__aeabi_fmul+0x1b6>
 80005f8:	0763      	lsls	r3, r4, #29
 80005fa:	d004      	beq.n	8000606 <__aeabi_fmul+0x14a>
 80005fc:	230f      	movs	r3, #15
 80005fe:	4023      	ands	r3, r4
 8000600:	2b04      	cmp	r3, #4
 8000602:	d000      	beq.n	8000606 <__aeabi_fmul+0x14a>
 8000604:	3404      	adds	r4, #4
 8000606:	0123      	lsls	r3, r4, #4
 8000608:	d503      	bpl.n	8000612 <__aeabi_fmul+0x156>
 800060a:	3180      	adds	r1, #128	; 0x80
 800060c:	0008      	movs	r0, r1
 800060e:	4b37      	ldr	r3, [pc, #220]	; (80006ec <__aeabi_fmul+0x230>)
 8000610:	401c      	ands	r4, r3
 8000612:	28fe      	cmp	r0, #254	; 0xfe
 8000614:	dcc0      	bgt.n	8000598 <__aeabi_fmul+0xdc>
 8000616:	01a4      	lsls	r4, r4, #6
 8000618:	0a64      	lsrs	r4, r4, #9
 800061a:	b2c0      	uxtb	r0, r0
 800061c:	e79a      	b.n	8000554 <__aeabi_fmul+0x98>
 800061e:	0037      	movs	r7, r6
 8000620:	e78e      	b.n	8000540 <__aeabi_fmul+0x84>
 8000622:	4652      	mov	r2, sl
 8000624:	2303      	movs	r3, #3
 8000626:	431a      	orrs	r2, r3
 8000628:	4692      	mov	sl, r2
 800062a:	2003      	movs	r0, #3
 800062c:	e771      	b.n	8000512 <__aeabi_fmul+0x56>
 800062e:	4648      	mov	r0, r9
 8000630:	f000 fbac 	bl	8000d8c <__clzsi2>
 8000634:	464a      	mov	r2, r9
 8000636:	1f43      	subs	r3, r0, #5
 8000638:	409a      	lsls	r2, r3
 800063a:	1a2d      	subs	r5, r5, r0
 800063c:	4691      	mov	r9, r2
 800063e:	2000      	movs	r0, #0
 8000640:	3d76      	subs	r5, #118	; 0x76
 8000642:	e766      	b.n	8000512 <__aeabi_fmul+0x56>
 8000644:	230c      	movs	r3, #12
 8000646:	469a      	mov	sl, r3
 8000648:	3b09      	subs	r3, #9
 800064a:	25ff      	movs	r5, #255	; 0xff
 800064c:	469b      	mov	fp, r3
 800064e:	e74d      	b.n	80004ec <__aeabi_fmul+0x30>
 8000650:	0020      	movs	r0, r4
 8000652:	f000 fb9b 	bl	8000d8c <__clzsi2>
 8000656:	2576      	movs	r5, #118	; 0x76
 8000658:	1f43      	subs	r3, r0, #5
 800065a:	409c      	lsls	r4, r3
 800065c:	2300      	movs	r3, #0
 800065e:	426d      	negs	r5, r5
 8000660:	469a      	mov	sl, r3
 8000662:	469b      	mov	fp, r3
 8000664:	1a2d      	subs	r5, r5, r0
 8000666:	e741      	b.n	80004ec <__aeabi_fmul+0x30>
 8000668:	2480      	movs	r4, #128	; 0x80
 800066a:	2700      	movs	r7, #0
 800066c:	20ff      	movs	r0, #255	; 0xff
 800066e:	03e4      	lsls	r4, r4, #15
 8000670:	e770      	b.n	8000554 <__aeabi_fmul+0x98>
 8000672:	2301      	movs	r3, #1
 8000674:	1a1b      	subs	r3, r3, r0
 8000676:	2b1b      	cmp	r3, #27
 8000678:	dd00      	ble.n	800067c <__aeabi_fmul+0x1c0>
 800067a:	e769      	b.n	8000550 <__aeabi_fmul+0x94>
 800067c:	319e      	adds	r1, #158	; 0x9e
 800067e:	0020      	movs	r0, r4
 8000680:	408c      	lsls	r4, r1
 8000682:	40d8      	lsrs	r0, r3
 8000684:	1e63      	subs	r3, r4, #1
 8000686:	419c      	sbcs	r4, r3
 8000688:	4304      	orrs	r4, r0
 800068a:	0763      	lsls	r3, r4, #29
 800068c:	d004      	beq.n	8000698 <__aeabi_fmul+0x1dc>
 800068e:	230f      	movs	r3, #15
 8000690:	4023      	ands	r3, r4
 8000692:	2b04      	cmp	r3, #4
 8000694:	d000      	beq.n	8000698 <__aeabi_fmul+0x1dc>
 8000696:	3404      	adds	r4, #4
 8000698:	0163      	lsls	r3, r4, #5
 800069a:	d51a      	bpl.n	80006d2 <__aeabi_fmul+0x216>
 800069c:	2001      	movs	r0, #1
 800069e:	2400      	movs	r4, #0
 80006a0:	e758      	b.n	8000554 <__aeabi_fmul+0x98>
 80006a2:	2080      	movs	r0, #128	; 0x80
 80006a4:	03c0      	lsls	r0, r0, #15
 80006a6:	4204      	tst	r4, r0
 80006a8:	d009      	beq.n	80006be <__aeabi_fmul+0x202>
 80006aa:	464b      	mov	r3, r9
 80006ac:	4203      	tst	r3, r0
 80006ae:	d106      	bne.n	80006be <__aeabi_fmul+0x202>
 80006b0:	464c      	mov	r4, r9
 80006b2:	4304      	orrs	r4, r0
 80006b4:	0264      	lsls	r4, r4, #9
 80006b6:	4647      	mov	r7, r8
 80006b8:	20ff      	movs	r0, #255	; 0xff
 80006ba:	0a64      	lsrs	r4, r4, #9
 80006bc:	e74a      	b.n	8000554 <__aeabi_fmul+0x98>
 80006be:	2080      	movs	r0, #128	; 0x80
 80006c0:	03c0      	lsls	r0, r0, #15
 80006c2:	4304      	orrs	r4, r0
 80006c4:	0264      	lsls	r4, r4, #9
 80006c6:	0037      	movs	r7, r6
 80006c8:	20ff      	movs	r0, #255	; 0xff
 80006ca:	0a64      	lsrs	r4, r4, #9
 80006cc:	e742      	b.n	8000554 <__aeabi_fmul+0x98>
 80006ce:	0029      	movs	r1, r5
 80006d0:	e78e      	b.n	80005f0 <__aeabi_fmul+0x134>
 80006d2:	01a4      	lsls	r4, r4, #6
 80006d4:	2000      	movs	r0, #0
 80006d6:	0a64      	lsrs	r4, r4, #9
 80006d8:	e73c      	b.n	8000554 <__aeabi_fmul+0x98>
 80006da:	2080      	movs	r0, #128	; 0x80
 80006dc:	03c0      	lsls	r0, r0, #15
 80006de:	4304      	orrs	r4, r0
 80006e0:	0264      	lsls	r4, r4, #9
 80006e2:	20ff      	movs	r0, #255	; 0xff
 80006e4:	0a64      	lsrs	r4, r4, #9
 80006e6:	e735      	b.n	8000554 <__aeabi_fmul+0x98>
 80006e8:	080025fc 	.word	0x080025fc
 80006ec:	f7ffffff 	.word	0xf7ffffff

080006f0 <__aeabi_fsub>:
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	4646      	mov	r6, r8
 80006f4:	46d6      	mov	lr, sl
 80006f6:	464f      	mov	r7, r9
 80006f8:	0243      	lsls	r3, r0, #9
 80006fa:	0a5b      	lsrs	r3, r3, #9
 80006fc:	00da      	lsls	r2, r3, #3
 80006fe:	4694      	mov	ip, r2
 8000700:	024a      	lsls	r2, r1, #9
 8000702:	b5c0      	push	{r6, r7, lr}
 8000704:	0044      	lsls	r4, r0, #1
 8000706:	0a56      	lsrs	r6, r2, #9
 8000708:	1c05      	adds	r5, r0, #0
 800070a:	46b0      	mov	r8, r6
 800070c:	0e24      	lsrs	r4, r4, #24
 800070e:	004e      	lsls	r6, r1, #1
 8000710:	0992      	lsrs	r2, r2, #6
 8000712:	001f      	movs	r7, r3
 8000714:	0020      	movs	r0, r4
 8000716:	4692      	mov	sl, r2
 8000718:	0fed      	lsrs	r5, r5, #31
 800071a:	0e36      	lsrs	r6, r6, #24
 800071c:	0fc9      	lsrs	r1, r1, #31
 800071e:	2eff      	cmp	r6, #255	; 0xff
 8000720:	d100      	bne.n	8000724 <__aeabi_fsub+0x34>
 8000722:	e07f      	b.n	8000824 <__aeabi_fsub+0x134>
 8000724:	2201      	movs	r2, #1
 8000726:	4051      	eors	r1, r2
 8000728:	428d      	cmp	r5, r1
 800072a:	d051      	beq.n	80007d0 <__aeabi_fsub+0xe0>
 800072c:	1ba2      	subs	r2, r4, r6
 800072e:	4691      	mov	r9, r2
 8000730:	2a00      	cmp	r2, #0
 8000732:	dc00      	bgt.n	8000736 <__aeabi_fsub+0x46>
 8000734:	e07e      	b.n	8000834 <__aeabi_fsub+0x144>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d100      	bne.n	800073c <__aeabi_fsub+0x4c>
 800073a:	e099      	b.n	8000870 <__aeabi_fsub+0x180>
 800073c:	2cff      	cmp	r4, #255	; 0xff
 800073e:	d100      	bne.n	8000742 <__aeabi_fsub+0x52>
 8000740:	e08c      	b.n	800085c <__aeabi_fsub+0x16c>
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	4652      	mov	r2, sl
 8000746:	04db      	lsls	r3, r3, #19
 8000748:	431a      	orrs	r2, r3
 800074a:	4692      	mov	sl, r2
 800074c:	464a      	mov	r2, r9
 800074e:	2301      	movs	r3, #1
 8000750:	2a1b      	cmp	r2, #27
 8000752:	dc08      	bgt.n	8000766 <__aeabi_fsub+0x76>
 8000754:	4653      	mov	r3, sl
 8000756:	2120      	movs	r1, #32
 8000758:	40d3      	lsrs	r3, r2
 800075a:	1a89      	subs	r1, r1, r2
 800075c:	4652      	mov	r2, sl
 800075e:	408a      	lsls	r2, r1
 8000760:	1e51      	subs	r1, r2, #1
 8000762:	418a      	sbcs	r2, r1
 8000764:	4313      	orrs	r3, r2
 8000766:	4662      	mov	r2, ip
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	015a      	lsls	r2, r3, #5
 800076c:	d400      	bmi.n	8000770 <__aeabi_fsub+0x80>
 800076e:	e0f3      	b.n	8000958 <__aeabi_fsub+0x268>
 8000770:	019b      	lsls	r3, r3, #6
 8000772:	099e      	lsrs	r6, r3, #6
 8000774:	0030      	movs	r0, r6
 8000776:	f000 fb09 	bl	8000d8c <__clzsi2>
 800077a:	3805      	subs	r0, #5
 800077c:	4086      	lsls	r6, r0
 800077e:	4284      	cmp	r4, r0
 8000780:	dd00      	ble.n	8000784 <__aeabi_fsub+0x94>
 8000782:	e0f7      	b.n	8000974 <__aeabi_fsub+0x284>
 8000784:	0032      	movs	r2, r6
 8000786:	1b04      	subs	r4, r0, r4
 8000788:	2020      	movs	r0, #32
 800078a:	3401      	adds	r4, #1
 800078c:	40e2      	lsrs	r2, r4
 800078e:	1b04      	subs	r4, r0, r4
 8000790:	40a6      	lsls	r6, r4
 8000792:	0033      	movs	r3, r6
 8000794:	1e5e      	subs	r6, r3, #1
 8000796:	41b3      	sbcs	r3, r6
 8000798:	2400      	movs	r4, #0
 800079a:	4313      	orrs	r3, r2
 800079c:	075a      	lsls	r2, r3, #29
 800079e:	d004      	beq.n	80007aa <__aeabi_fsub+0xba>
 80007a0:	220f      	movs	r2, #15
 80007a2:	401a      	ands	r2, r3
 80007a4:	2a04      	cmp	r2, #4
 80007a6:	d000      	beq.n	80007aa <__aeabi_fsub+0xba>
 80007a8:	3304      	adds	r3, #4
 80007aa:	015a      	lsls	r2, r3, #5
 80007ac:	d400      	bmi.n	80007b0 <__aeabi_fsub+0xc0>
 80007ae:	e0d6      	b.n	800095e <__aeabi_fsub+0x26e>
 80007b0:	1c62      	adds	r2, r4, #1
 80007b2:	2cfe      	cmp	r4, #254	; 0xfe
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fsub+0xc8>
 80007b6:	e0da      	b.n	800096e <__aeabi_fsub+0x27e>
 80007b8:	019b      	lsls	r3, r3, #6
 80007ba:	0a5f      	lsrs	r7, r3, #9
 80007bc:	b2d0      	uxtb	r0, r2
 80007be:	05c0      	lsls	r0, r0, #23
 80007c0:	4338      	orrs	r0, r7
 80007c2:	07ed      	lsls	r5, r5, #31
 80007c4:	4328      	orrs	r0, r5
 80007c6:	bce0      	pop	{r5, r6, r7}
 80007c8:	46ba      	mov	sl, r7
 80007ca:	46b1      	mov	r9, r6
 80007cc:	46a8      	mov	r8, r5
 80007ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d0:	1ba2      	subs	r2, r4, r6
 80007d2:	4691      	mov	r9, r2
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	dd63      	ble.n	80008a0 <__aeabi_fsub+0x1b0>
 80007d8:	2e00      	cmp	r6, #0
 80007da:	d100      	bne.n	80007de <__aeabi_fsub+0xee>
 80007dc:	e099      	b.n	8000912 <__aeabi_fsub+0x222>
 80007de:	2cff      	cmp	r4, #255	; 0xff
 80007e0:	d03c      	beq.n	800085c <__aeabi_fsub+0x16c>
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	4652      	mov	r2, sl
 80007e6:	04db      	lsls	r3, r3, #19
 80007e8:	431a      	orrs	r2, r3
 80007ea:	4692      	mov	sl, r2
 80007ec:	464a      	mov	r2, r9
 80007ee:	2301      	movs	r3, #1
 80007f0:	2a1b      	cmp	r2, #27
 80007f2:	dc08      	bgt.n	8000806 <__aeabi_fsub+0x116>
 80007f4:	4653      	mov	r3, sl
 80007f6:	2120      	movs	r1, #32
 80007f8:	40d3      	lsrs	r3, r2
 80007fa:	1a89      	subs	r1, r1, r2
 80007fc:	4652      	mov	r2, sl
 80007fe:	408a      	lsls	r2, r1
 8000800:	1e51      	subs	r1, r2, #1
 8000802:	418a      	sbcs	r2, r1
 8000804:	4313      	orrs	r3, r2
 8000806:	4463      	add	r3, ip
 8000808:	015a      	lsls	r2, r3, #5
 800080a:	d400      	bmi.n	800080e <__aeabi_fsub+0x11e>
 800080c:	e0a4      	b.n	8000958 <__aeabi_fsub+0x268>
 800080e:	3401      	adds	r4, #1
 8000810:	2cff      	cmp	r4, #255	; 0xff
 8000812:	d100      	bne.n	8000816 <__aeabi_fsub+0x126>
 8000814:	e0ab      	b.n	800096e <__aeabi_fsub+0x27e>
 8000816:	2201      	movs	r2, #1
 8000818:	4997      	ldr	r1, [pc, #604]	; (8000a78 <__aeabi_fsub+0x388>)
 800081a:	401a      	ands	r2, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	400b      	ands	r3, r1
 8000820:	4313      	orrs	r3, r2
 8000822:	e7bb      	b.n	800079c <__aeabi_fsub+0xac>
 8000824:	2a00      	cmp	r2, #0
 8000826:	d032      	beq.n	800088e <__aeabi_fsub+0x19e>
 8000828:	428d      	cmp	r5, r1
 800082a:	d035      	beq.n	8000898 <__aeabi_fsub+0x1a8>
 800082c:	22ff      	movs	r2, #255	; 0xff
 800082e:	4252      	negs	r2, r2
 8000830:	4691      	mov	r9, r2
 8000832:	44a1      	add	r9, r4
 8000834:	464a      	mov	r2, r9
 8000836:	2a00      	cmp	r2, #0
 8000838:	d051      	beq.n	80008de <__aeabi_fsub+0x1ee>
 800083a:	1b30      	subs	r0, r6, r4
 800083c:	2c00      	cmp	r4, #0
 800083e:	d000      	beq.n	8000842 <__aeabi_fsub+0x152>
 8000840:	e09c      	b.n	800097c <__aeabi_fsub+0x28c>
 8000842:	4663      	mov	r3, ip
 8000844:	2b00      	cmp	r3, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fsub+0x15a>
 8000848:	e0df      	b.n	8000a0a <__aeabi_fsub+0x31a>
 800084a:	3801      	subs	r0, #1
 800084c:	2800      	cmp	r0, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_fsub+0x162>
 8000850:	e0f7      	b.n	8000a42 <__aeabi_fsub+0x352>
 8000852:	2eff      	cmp	r6, #255	; 0xff
 8000854:	d000      	beq.n	8000858 <__aeabi_fsub+0x168>
 8000856:	e099      	b.n	800098c <__aeabi_fsub+0x29c>
 8000858:	000d      	movs	r5, r1
 800085a:	4643      	mov	r3, r8
 800085c:	2b00      	cmp	r3, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_fsub+0x172>
 8000860:	e085      	b.n	800096e <__aeabi_fsub+0x27e>
 8000862:	2780      	movs	r7, #128	; 0x80
 8000864:	03ff      	lsls	r7, r7, #15
 8000866:	431f      	orrs	r7, r3
 8000868:	027f      	lsls	r7, r7, #9
 800086a:	20ff      	movs	r0, #255	; 0xff
 800086c:	0a7f      	lsrs	r7, r7, #9
 800086e:	e7a6      	b.n	80007be <__aeabi_fsub+0xce>
 8000870:	4652      	mov	r2, sl
 8000872:	2a00      	cmp	r2, #0
 8000874:	d074      	beq.n	8000960 <__aeabi_fsub+0x270>
 8000876:	2201      	movs	r2, #1
 8000878:	4252      	negs	r2, r2
 800087a:	4690      	mov	r8, r2
 800087c:	44c1      	add	r9, r8
 800087e:	464a      	mov	r2, r9
 8000880:	2a00      	cmp	r2, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_fsub+0x196>
 8000884:	e0c8      	b.n	8000a18 <__aeabi_fsub+0x328>
 8000886:	2cff      	cmp	r4, #255	; 0xff
 8000888:	d000      	beq.n	800088c <__aeabi_fsub+0x19c>
 800088a:	e75f      	b.n	800074c <__aeabi_fsub+0x5c>
 800088c:	e7e6      	b.n	800085c <__aeabi_fsub+0x16c>
 800088e:	2201      	movs	r2, #1
 8000890:	4051      	eors	r1, r2
 8000892:	42a9      	cmp	r1, r5
 8000894:	d000      	beq.n	8000898 <__aeabi_fsub+0x1a8>
 8000896:	e749      	b.n	800072c <__aeabi_fsub+0x3c>
 8000898:	22ff      	movs	r2, #255	; 0xff
 800089a:	4252      	negs	r2, r2
 800089c:	4691      	mov	r9, r2
 800089e:	44a1      	add	r9, r4
 80008a0:	464a      	mov	r2, r9
 80008a2:	2a00      	cmp	r2, #0
 80008a4:	d043      	beq.n	800092e <__aeabi_fsub+0x23e>
 80008a6:	1b31      	subs	r1, r6, r4
 80008a8:	2c00      	cmp	r4, #0
 80008aa:	d100      	bne.n	80008ae <__aeabi_fsub+0x1be>
 80008ac:	e08c      	b.n	80009c8 <__aeabi_fsub+0x2d8>
 80008ae:	2eff      	cmp	r6, #255	; 0xff
 80008b0:	d100      	bne.n	80008b4 <__aeabi_fsub+0x1c4>
 80008b2:	e092      	b.n	80009da <__aeabi_fsub+0x2ea>
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	4662      	mov	r2, ip
 80008b8:	04db      	lsls	r3, r3, #19
 80008ba:	431a      	orrs	r2, r3
 80008bc:	4694      	mov	ip, r2
 80008be:	2301      	movs	r3, #1
 80008c0:	291b      	cmp	r1, #27
 80008c2:	dc09      	bgt.n	80008d8 <__aeabi_fsub+0x1e8>
 80008c4:	2020      	movs	r0, #32
 80008c6:	4663      	mov	r3, ip
 80008c8:	4662      	mov	r2, ip
 80008ca:	40cb      	lsrs	r3, r1
 80008cc:	1a41      	subs	r1, r0, r1
 80008ce:	408a      	lsls	r2, r1
 80008d0:	0011      	movs	r1, r2
 80008d2:	1e48      	subs	r0, r1, #1
 80008d4:	4181      	sbcs	r1, r0
 80008d6:	430b      	orrs	r3, r1
 80008d8:	0034      	movs	r4, r6
 80008da:	4453      	add	r3, sl
 80008dc:	e794      	b.n	8000808 <__aeabi_fsub+0x118>
 80008de:	22fe      	movs	r2, #254	; 0xfe
 80008e0:	1c66      	adds	r6, r4, #1
 80008e2:	4232      	tst	r2, r6
 80008e4:	d164      	bne.n	80009b0 <__aeabi_fsub+0x2c0>
 80008e6:	2c00      	cmp	r4, #0
 80008e8:	d000      	beq.n	80008ec <__aeabi_fsub+0x1fc>
 80008ea:	e082      	b.n	80009f2 <__aeabi_fsub+0x302>
 80008ec:	4663      	mov	r3, ip
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fsub+0x204>
 80008f2:	e0ab      	b.n	8000a4c <__aeabi_fsub+0x35c>
 80008f4:	4653      	mov	r3, sl
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d100      	bne.n	80008fc <__aeabi_fsub+0x20c>
 80008fa:	e760      	b.n	80007be <__aeabi_fsub+0xce>
 80008fc:	4663      	mov	r3, ip
 80008fe:	4652      	mov	r2, sl
 8000900:	1a9b      	subs	r3, r3, r2
 8000902:	015a      	lsls	r2, r3, #5
 8000904:	d400      	bmi.n	8000908 <__aeabi_fsub+0x218>
 8000906:	e0aa      	b.n	8000a5e <__aeabi_fsub+0x36e>
 8000908:	4663      	mov	r3, ip
 800090a:	4652      	mov	r2, sl
 800090c:	000d      	movs	r5, r1
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	e744      	b.n	800079c <__aeabi_fsub+0xac>
 8000912:	4652      	mov	r2, sl
 8000914:	2a00      	cmp	r2, #0
 8000916:	d023      	beq.n	8000960 <__aeabi_fsub+0x270>
 8000918:	2201      	movs	r2, #1
 800091a:	4252      	negs	r2, r2
 800091c:	4690      	mov	r8, r2
 800091e:	44c1      	add	r9, r8
 8000920:	464a      	mov	r2, r9
 8000922:	2a00      	cmp	r2, #0
 8000924:	d075      	beq.n	8000a12 <__aeabi_fsub+0x322>
 8000926:	2cff      	cmp	r4, #255	; 0xff
 8000928:	d000      	beq.n	800092c <__aeabi_fsub+0x23c>
 800092a:	e75f      	b.n	80007ec <__aeabi_fsub+0xfc>
 800092c:	e796      	b.n	800085c <__aeabi_fsub+0x16c>
 800092e:	26fe      	movs	r6, #254	; 0xfe
 8000930:	3401      	adds	r4, #1
 8000932:	4226      	tst	r6, r4
 8000934:	d153      	bne.n	80009de <__aeabi_fsub+0x2ee>
 8000936:	2800      	cmp	r0, #0
 8000938:	d172      	bne.n	8000a20 <__aeabi_fsub+0x330>
 800093a:	4663      	mov	r3, ip
 800093c:	2b00      	cmp	r3, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_fsub+0x252>
 8000940:	e093      	b.n	8000a6a <__aeabi_fsub+0x37a>
 8000942:	4653      	mov	r3, sl
 8000944:	2b00      	cmp	r3, #0
 8000946:	d100      	bne.n	800094a <__aeabi_fsub+0x25a>
 8000948:	e739      	b.n	80007be <__aeabi_fsub+0xce>
 800094a:	4463      	add	r3, ip
 800094c:	2400      	movs	r4, #0
 800094e:	015a      	lsls	r2, r3, #5
 8000950:	d502      	bpl.n	8000958 <__aeabi_fsub+0x268>
 8000952:	4a4a      	ldr	r2, [pc, #296]	; (8000a7c <__aeabi_fsub+0x38c>)
 8000954:	3401      	adds	r4, #1
 8000956:	4013      	ands	r3, r2
 8000958:	075a      	lsls	r2, r3, #29
 800095a:	d000      	beq.n	800095e <__aeabi_fsub+0x26e>
 800095c:	e720      	b.n	80007a0 <__aeabi_fsub+0xb0>
 800095e:	08db      	lsrs	r3, r3, #3
 8000960:	2cff      	cmp	r4, #255	; 0xff
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x276>
 8000964:	e77a      	b.n	800085c <__aeabi_fsub+0x16c>
 8000966:	025b      	lsls	r3, r3, #9
 8000968:	0a5f      	lsrs	r7, r3, #9
 800096a:	b2e0      	uxtb	r0, r4
 800096c:	e727      	b.n	80007be <__aeabi_fsub+0xce>
 800096e:	20ff      	movs	r0, #255	; 0xff
 8000970:	2700      	movs	r7, #0
 8000972:	e724      	b.n	80007be <__aeabi_fsub+0xce>
 8000974:	4b41      	ldr	r3, [pc, #260]	; (8000a7c <__aeabi_fsub+0x38c>)
 8000976:	1a24      	subs	r4, r4, r0
 8000978:	4033      	ands	r3, r6
 800097a:	e70f      	b.n	800079c <__aeabi_fsub+0xac>
 800097c:	2eff      	cmp	r6, #255	; 0xff
 800097e:	d100      	bne.n	8000982 <__aeabi_fsub+0x292>
 8000980:	e76a      	b.n	8000858 <__aeabi_fsub+0x168>
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	4662      	mov	r2, ip
 8000986:	04db      	lsls	r3, r3, #19
 8000988:	431a      	orrs	r2, r3
 800098a:	4694      	mov	ip, r2
 800098c:	2301      	movs	r3, #1
 800098e:	281b      	cmp	r0, #27
 8000990:	dc09      	bgt.n	80009a6 <__aeabi_fsub+0x2b6>
 8000992:	2420      	movs	r4, #32
 8000994:	4663      	mov	r3, ip
 8000996:	4662      	mov	r2, ip
 8000998:	40c3      	lsrs	r3, r0
 800099a:	1a20      	subs	r0, r4, r0
 800099c:	4082      	lsls	r2, r0
 800099e:	0010      	movs	r0, r2
 80009a0:	1e44      	subs	r4, r0, #1
 80009a2:	41a0      	sbcs	r0, r4
 80009a4:	4303      	orrs	r3, r0
 80009a6:	4652      	mov	r2, sl
 80009a8:	000d      	movs	r5, r1
 80009aa:	0034      	movs	r4, r6
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	e6dc      	b.n	800076a <__aeabi_fsub+0x7a>
 80009b0:	4663      	mov	r3, ip
 80009b2:	4652      	mov	r2, sl
 80009b4:	1a9e      	subs	r6, r3, r2
 80009b6:	0173      	lsls	r3, r6, #5
 80009b8:	d417      	bmi.n	80009ea <__aeabi_fsub+0x2fa>
 80009ba:	2e00      	cmp	r6, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fsub+0x2d0>
 80009be:	e6d9      	b.n	8000774 <__aeabi_fsub+0x84>
 80009c0:	2500      	movs	r5, #0
 80009c2:	2000      	movs	r0, #0
 80009c4:	2700      	movs	r7, #0
 80009c6:	e6fa      	b.n	80007be <__aeabi_fsub+0xce>
 80009c8:	4663      	mov	r3, ip
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d044      	beq.n	8000a58 <__aeabi_fsub+0x368>
 80009ce:	3901      	subs	r1, #1
 80009d0:	2900      	cmp	r1, #0
 80009d2:	d04c      	beq.n	8000a6e <__aeabi_fsub+0x37e>
 80009d4:	2eff      	cmp	r6, #255	; 0xff
 80009d6:	d000      	beq.n	80009da <__aeabi_fsub+0x2ea>
 80009d8:	e771      	b.n	80008be <__aeabi_fsub+0x1ce>
 80009da:	4643      	mov	r3, r8
 80009dc:	e73e      	b.n	800085c <__aeabi_fsub+0x16c>
 80009de:	2cff      	cmp	r4, #255	; 0xff
 80009e0:	d0c5      	beq.n	800096e <__aeabi_fsub+0x27e>
 80009e2:	4652      	mov	r2, sl
 80009e4:	4462      	add	r2, ip
 80009e6:	0853      	lsrs	r3, r2, #1
 80009e8:	e7b6      	b.n	8000958 <__aeabi_fsub+0x268>
 80009ea:	4663      	mov	r3, ip
 80009ec:	000d      	movs	r5, r1
 80009ee:	1ad6      	subs	r6, r2, r3
 80009f0:	e6c0      	b.n	8000774 <__aeabi_fsub+0x84>
 80009f2:	4662      	mov	r2, ip
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	d116      	bne.n	8000a26 <__aeabi_fsub+0x336>
 80009f8:	4653      	mov	r3, sl
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d000      	beq.n	8000a00 <__aeabi_fsub+0x310>
 80009fe:	e72b      	b.n	8000858 <__aeabi_fsub+0x168>
 8000a00:	2780      	movs	r7, #128	; 0x80
 8000a02:	2500      	movs	r5, #0
 8000a04:	20ff      	movs	r0, #255	; 0xff
 8000a06:	03ff      	lsls	r7, r7, #15
 8000a08:	e6d9      	b.n	80007be <__aeabi_fsub+0xce>
 8000a0a:	000d      	movs	r5, r1
 8000a0c:	4643      	mov	r3, r8
 8000a0e:	0034      	movs	r4, r6
 8000a10:	e7a6      	b.n	8000960 <__aeabi_fsub+0x270>
 8000a12:	4653      	mov	r3, sl
 8000a14:	4463      	add	r3, ip
 8000a16:	e6f7      	b.n	8000808 <__aeabi_fsub+0x118>
 8000a18:	4663      	mov	r3, ip
 8000a1a:	4652      	mov	r2, sl
 8000a1c:	1a9b      	subs	r3, r3, r2
 8000a1e:	e6a4      	b.n	800076a <__aeabi_fsub+0x7a>
 8000a20:	4662      	mov	r2, ip
 8000a22:	2a00      	cmp	r2, #0
 8000a24:	d0d9      	beq.n	80009da <__aeabi_fsub+0x2ea>
 8000a26:	4652      	mov	r2, sl
 8000a28:	2a00      	cmp	r2, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fsub+0x33e>
 8000a2c:	e716      	b.n	800085c <__aeabi_fsub+0x16c>
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	03d2      	lsls	r2, r2, #15
 8000a32:	4213      	tst	r3, r2
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fsub+0x348>
 8000a36:	e711      	b.n	800085c <__aeabi_fsub+0x16c>
 8000a38:	4640      	mov	r0, r8
 8000a3a:	4210      	tst	r0, r2
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_fsub+0x350>
 8000a3e:	e70d      	b.n	800085c <__aeabi_fsub+0x16c>
 8000a40:	e70a      	b.n	8000858 <__aeabi_fsub+0x168>
 8000a42:	4652      	mov	r2, sl
 8000a44:	000d      	movs	r5, r1
 8000a46:	0034      	movs	r4, r6
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	e68e      	b.n	800076a <__aeabi_fsub+0x7a>
 8000a4c:	4653      	mov	r3, sl
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d008      	beq.n	8000a64 <__aeabi_fsub+0x374>
 8000a52:	000d      	movs	r5, r1
 8000a54:	4647      	mov	r7, r8
 8000a56:	e6b2      	b.n	80007be <__aeabi_fsub+0xce>
 8000a58:	4643      	mov	r3, r8
 8000a5a:	0034      	movs	r4, r6
 8000a5c:	e780      	b.n	8000960 <__aeabi_fsub+0x270>
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d000      	beq.n	8000a64 <__aeabi_fsub+0x374>
 8000a62:	e779      	b.n	8000958 <__aeabi_fsub+0x268>
 8000a64:	2500      	movs	r5, #0
 8000a66:	2700      	movs	r7, #0
 8000a68:	e6a9      	b.n	80007be <__aeabi_fsub+0xce>
 8000a6a:	4647      	mov	r7, r8
 8000a6c:	e6a7      	b.n	80007be <__aeabi_fsub+0xce>
 8000a6e:	4653      	mov	r3, sl
 8000a70:	0034      	movs	r4, r6
 8000a72:	4463      	add	r3, ip
 8000a74:	e6c8      	b.n	8000808 <__aeabi_fsub+0x118>
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	7dffffff 	.word	0x7dffffff
 8000a7c:	fbffffff 	.word	0xfbffffff

08000a80 <__aeabi_f2iz>:
 8000a80:	0241      	lsls	r1, r0, #9
 8000a82:	0042      	lsls	r2, r0, #1
 8000a84:	0fc3      	lsrs	r3, r0, #31
 8000a86:	0a49      	lsrs	r1, r1, #9
 8000a88:	2000      	movs	r0, #0
 8000a8a:	0e12      	lsrs	r2, r2, #24
 8000a8c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a8e:	d903      	bls.n	8000a98 <__aeabi_f2iz+0x18>
 8000a90:	2a9d      	cmp	r2, #157	; 0x9d
 8000a92:	d902      	bls.n	8000a9a <__aeabi_f2iz+0x1a>
 8000a94:	4a09      	ldr	r2, [pc, #36]	; (8000abc <__aeabi_f2iz+0x3c>)
 8000a96:	1898      	adds	r0, r3, r2
 8000a98:	4770      	bx	lr
 8000a9a:	2080      	movs	r0, #128	; 0x80
 8000a9c:	0400      	lsls	r0, r0, #16
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	2a95      	cmp	r2, #149	; 0x95
 8000aa2:	dc07      	bgt.n	8000ab4 <__aeabi_f2iz+0x34>
 8000aa4:	2096      	movs	r0, #150	; 0x96
 8000aa6:	1a82      	subs	r2, r0, r2
 8000aa8:	40d1      	lsrs	r1, r2
 8000aaa:	4248      	negs	r0, r1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f3      	bne.n	8000a98 <__aeabi_f2iz+0x18>
 8000ab0:	0008      	movs	r0, r1
 8000ab2:	e7f1      	b.n	8000a98 <__aeabi_f2iz+0x18>
 8000ab4:	3a96      	subs	r2, #150	; 0x96
 8000ab6:	4091      	lsls	r1, r2
 8000ab8:	e7f7      	b.n	8000aaa <__aeabi_f2iz+0x2a>
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	7fffffff 	.word	0x7fffffff

08000ac0 <__eqdf2>:
 8000ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac2:	464f      	mov	r7, r9
 8000ac4:	4646      	mov	r6, r8
 8000ac6:	46d6      	mov	lr, sl
 8000ac8:	4694      	mov	ip, r2
 8000aca:	4691      	mov	r9, r2
 8000acc:	031a      	lsls	r2, r3, #12
 8000ace:	0b12      	lsrs	r2, r2, #12
 8000ad0:	4d18      	ldr	r5, [pc, #96]	; (8000b34 <__eqdf2+0x74>)
 8000ad2:	b5c0      	push	{r6, r7, lr}
 8000ad4:	004c      	lsls	r4, r1, #1
 8000ad6:	030f      	lsls	r7, r1, #12
 8000ad8:	4692      	mov	sl, r2
 8000ada:	005a      	lsls	r2, r3, #1
 8000adc:	0006      	movs	r6, r0
 8000ade:	4680      	mov	r8, r0
 8000ae0:	0b3f      	lsrs	r7, r7, #12
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	0d64      	lsrs	r4, r4, #21
 8000ae6:	0fc9      	lsrs	r1, r1, #31
 8000ae8:	0d52      	lsrs	r2, r2, #21
 8000aea:	0fdb      	lsrs	r3, r3, #31
 8000aec:	42ac      	cmp	r4, r5
 8000aee:	d00a      	beq.n	8000b06 <__eqdf2+0x46>
 8000af0:	42aa      	cmp	r2, r5
 8000af2:	d003      	beq.n	8000afc <__eqdf2+0x3c>
 8000af4:	4294      	cmp	r4, r2
 8000af6:	d101      	bne.n	8000afc <__eqdf2+0x3c>
 8000af8:	4557      	cmp	r7, sl
 8000afa:	d00d      	beq.n	8000b18 <__eqdf2+0x58>
 8000afc:	bce0      	pop	{r5, r6, r7}
 8000afe:	46ba      	mov	sl, r7
 8000b00:	46b1      	mov	r9, r6
 8000b02:	46a8      	mov	r8, r5
 8000b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b06:	003d      	movs	r5, r7
 8000b08:	4335      	orrs	r5, r6
 8000b0a:	d1f7      	bne.n	8000afc <__eqdf2+0x3c>
 8000b0c:	42a2      	cmp	r2, r4
 8000b0e:	d1f5      	bne.n	8000afc <__eqdf2+0x3c>
 8000b10:	4652      	mov	r2, sl
 8000b12:	4665      	mov	r5, ip
 8000b14:	432a      	orrs	r2, r5
 8000b16:	d1f1      	bne.n	8000afc <__eqdf2+0x3c>
 8000b18:	2001      	movs	r0, #1
 8000b1a:	45c8      	cmp	r8, r9
 8000b1c:	d1ee      	bne.n	8000afc <__eqdf2+0x3c>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d006      	beq.n	8000b30 <__eqdf2+0x70>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d1ea      	bne.n	8000afc <__eqdf2+0x3c>
 8000b26:	433e      	orrs	r6, r7
 8000b28:	0030      	movs	r0, r6
 8000b2a:	1e46      	subs	r6, r0, #1
 8000b2c:	41b0      	sbcs	r0, r6
 8000b2e:	e7e5      	b.n	8000afc <__eqdf2+0x3c>
 8000b30:	2000      	movs	r0, #0
 8000b32:	e7e3      	b.n	8000afc <__eqdf2+0x3c>
 8000b34:	000007ff 	.word	0x000007ff

08000b38 <__gedf2>:
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	464e      	mov	r6, r9
 8000b3c:	4645      	mov	r5, r8
 8000b3e:	4657      	mov	r7, sl
 8000b40:	46de      	mov	lr, fp
 8000b42:	0004      	movs	r4, r0
 8000b44:	0018      	movs	r0, r3
 8000b46:	b5e0      	push	{r5, r6, r7, lr}
 8000b48:	0016      	movs	r6, r2
 8000b4a:	031b      	lsls	r3, r3, #12
 8000b4c:	0b1b      	lsrs	r3, r3, #12
 8000b4e:	4d32      	ldr	r5, [pc, #200]	; (8000c18 <__gedf2+0xe0>)
 8000b50:	030f      	lsls	r7, r1, #12
 8000b52:	004a      	lsls	r2, r1, #1
 8000b54:	4699      	mov	r9, r3
 8000b56:	0043      	lsls	r3, r0, #1
 8000b58:	46a4      	mov	ip, r4
 8000b5a:	46b0      	mov	r8, r6
 8000b5c:	0b3f      	lsrs	r7, r7, #12
 8000b5e:	0d52      	lsrs	r2, r2, #21
 8000b60:	0fc9      	lsrs	r1, r1, #31
 8000b62:	0d5b      	lsrs	r3, r3, #21
 8000b64:	0fc0      	lsrs	r0, r0, #31
 8000b66:	42aa      	cmp	r2, r5
 8000b68:	d029      	beq.n	8000bbe <__gedf2+0x86>
 8000b6a:	42ab      	cmp	r3, r5
 8000b6c:	d018      	beq.n	8000ba0 <__gedf2+0x68>
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	d12a      	bne.n	8000bc8 <__gedf2+0x90>
 8000b72:	433c      	orrs	r4, r7
 8000b74:	46a3      	mov	fp, r4
 8000b76:	4265      	negs	r5, r4
 8000b78:	4165      	adcs	r5, r4
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d102      	bne.n	8000b84 <__gedf2+0x4c>
 8000b7e:	464c      	mov	r4, r9
 8000b80:	4326      	orrs	r6, r4
 8000b82:	d027      	beq.n	8000bd4 <__gedf2+0x9c>
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d115      	bne.n	8000bb4 <__gedf2+0x7c>
 8000b88:	4281      	cmp	r1, r0
 8000b8a:	d028      	beq.n	8000bde <__gedf2+0xa6>
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	3901      	subs	r1, #1
 8000b90:	4008      	ands	r0, r1
 8000b92:	3801      	subs	r0, #1
 8000b94:	bcf0      	pop	{r4, r5, r6, r7}
 8000b96:	46bb      	mov	fp, r7
 8000b98:	46b2      	mov	sl, r6
 8000b9a:	46a9      	mov	r9, r5
 8000b9c:	46a0      	mov	r8, r4
 8000b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba0:	464d      	mov	r5, r9
 8000ba2:	432e      	orrs	r6, r5
 8000ba4:	d12f      	bne.n	8000c06 <__gedf2+0xce>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d1ee      	bne.n	8000b88 <__gedf2+0x50>
 8000baa:	433c      	orrs	r4, r7
 8000bac:	4265      	negs	r5, r4
 8000bae:	4165      	adcs	r5, r4
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e9      	beq.n	8000b88 <__gedf2+0x50>
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d1ed      	bne.n	8000b94 <__gedf2+0x5c>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	4240      	negs	r0, r0
 8000bbc:	e7ea      	b.n	8000b94 <__gedf2+0x5c>
 8000bbe:	003d      	movs	r5, r7
 8000bc0:	4325      	orrs	r5, r4
 8000bc2:	d120      	bne.n	8000c06 <__gedf2+0xce>
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d0eb      	beq.n	8000ba0 <__gedf2+0x68>
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1dd      	bne.n	8000b88 <__gedf2+0x50>
 8000bcc:	464c      	mov	r4, r9
 8000bce:	4326      	orrs	r6, r4
 8000bd0:	d1da      	bne.n	8000b88 <__gedf2+0x50>
 8000bd2:	e7db      	b.n	8000b8c <__gedf2+0x54>
 8000bd4:	465b      	mov	r3, fp
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0db      	beq.n	8000b94 <__gedf2+0x5c>
 8000bdc:	e7d6      	b.n	8000b8c <__gedf2+0x54>
 8000bde:	429a      	cmp	r2, r3
 8000be0:	dc0a      	bgt.n	8000bf8 <__gedf2+0xc0>
 8000be2:	dbe7      	blt.n	8000bb4 <__gedf2+0x7c>
 8000be4:	454f      	cmp	r7, r9
 8000be6:	d8d1      	bhi.n	8000b8c <__gedf2+0x54>
 8000be8:	d010      	beq.n	8000c0c <__gedf2+0xd4>
 8000bea:	2000      	movs	r0, #0
 8000bec:	454f      	cmp	r7, r9
 8000bee:	d2d1      	bcs.n	8000b94 <__gedf2+0x5c>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	d0e1      	beq.n	8000bb8 <__gedf2+0x80>
 8000bf4:	0008      	movs	r0, r1
 8000bf6:	e7cd      	b.n	8000b94 <__gedf2+0x5c>
 8000bf8:	4243      	negs	r3, r0
 8000bfa:	4158      	adcs	r0, r3
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	4240      	negs	r0, r0
 8000c00:	4018      	ands	r0, r3
 8000c02:	3801      	subs	r0, #1
 8000c04:	e7c6      	b.n	8000b94 <__gedf2+0x5c>
 8000c06:	2002      	movs	r0, #2
 8000c08:	4240      	negs	r0, r0
 8000c0a:	e7c3      	b.n	8000b94 <__gedf2+0x5c>
 8000c0c:	45c4      	cmp	ip, r8
 8000c0e:	d8bd      	bhi.n	8000b8c <__gedf2+0x54>
 8000c10:	2000      	movs	r0, #0
 8000c12:	45c4      	cmp	ip, r8
 8000c14:	d2be      	bcs.n	8000b94 <__gedf2+0x5c>
 8000c16:	e7eb      	b.n	8000bf0 <__gedf2+0xb8>
 8000c18:	000007ff 	.word	0x000007ff

08000c1c <__ledf2>:
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	464e      	mov	r6, r9
 8000c20:	4645      	mov	r5, r8
 8000c22:	4657      	mov	r7, sl
 8000c24:	46de      	mov	lr, fp
 8000c26:	0004      	movs	r4, r0
 8000c28:	0018      	movs	r0, r3
 8000c2a:	b5e0      	push	{r5, r6, r7, lr}
 8000c2c:	0016      	movs	r6, r2
 8000c2e:	031b      	lsls	r3, r3, #12
 8000c30:	0b1b      	lsrs	r3, r3, #12
 8000c32:	4d31      	ldr	r5, [pc, #196]	; (8000cf8 <__ledf2+0xdc>)
 8000c34:	030f      	lsls	r7, r1, #12
 8000c36:	004a      	lsls	r2, r1, #1
 8000c38:	4699      	mov	r9, r3
 8000c3a:	0043      	lsls	r3, r0, #1
 8000c3c:	46a4      	mov	ip, r4
 8000c3e:	46b0      	mov	r8, r6
 8000c40:	0b3f      	lsrs	r7, r7, #12
 8000c42:	0d52      	lsrs	r2, r2, #21
 8000c44:	0fc9      	lsrs	r1, r1, #31
 8000c46:	0d5b      	lsrs	r3, r3, #21
 8000c48:	0fc0      	lsrs	r0, r0, #31
 8000c4a:	42aa      	cmp	r2, r5
 8000c4c:	d011      	beq.n	8000c72 <__ledf2+0x56>
 8000c4e:	42ab      	cmp	r3, r5
 8000c50:	d014      	beq.n	8000c7c <__ledf2+0x60>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	d12f      	bne.n	8000cb6 <__ledf2+0x9a>
 8000c56:	433c      	orrs	r4, r7
 8000c58:	46a3      	mov	fp, r4
 8000c5a:	4265      	negs	r5, r4
 8000c5c:	4165      	adcs	r5, r4
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d114      	bne.n	8000c8c <__ledf2+0x70>
 8000c62:	464c      	mov	r4, r9
 8000c64:	4326      	orrs	r6, r4
 8000c66:	d111      	bne.n	8000c8c <__ledf2+0x70>
 8000c68:	465b      	mov	r3, fp
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d017      	beq.n	8000ca0 <__ledf2+0x84>
 8000c70:	e010      	b.n	8000c94 <__ledf2+0x78>
 8000c72:	003d      	movs	r5, r7
 8000c74:	4325      	orrs	r5, r4
 8000c76:	d112      	bne.n	8000c9e <__ledf2+0x82>
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d11c      	bne.n	8000cb6 <__ledf2+0x9a>
 8000c7c:	464d      	mov	r5, r9
 8000c7e:	432e      	orrs	r6, r5
 8000c80:	d10d      	bne.n	8000c9e <__ledf2+0x82>
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	d104      	bne.n	8000c90 <__ledf2+0x74>
 8000c86:	433c      	orrs	r4, r7
 8000c88:	4265      	negs	r5, r4
 8000c8a:	4165      	adcs	r5, r4
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d10d      	bne.n	8000cac <__ledf2+0x90>
 8000c90:	4281      	cmp	r1, r0
 8000c92:	d016      	beq.n	8000cc2 <__ledf2+0xa6>
 8000c94:	2002      	movs	r0, #2
 8000c96:	3901      	subs	r1, #1
 8000c98:	4008      	ands	r0, r1
 8000c9a:	3801      	subs	r0, #1
 8000c9c:	e000      	b.n	8000ca0 <__ledf2+0x84>
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	bcf0      	pop	{r4, r5, r6, r7}
 8000ca2:	46bb      	mov	fp, r7
 8000ca4:	46b2      	mov	sl, r6
 8000ca6:	46a9      	mov	r9, r5
 8000ca8:	46a0      	mov	r8, r4
 8000caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d1f7      	bne.n	8000ca0 <__ledf2+0x84>
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	e7f4      	b.n	8000ca0 <__ledf2+0x84>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1ea      	bne.n	8000c90 <__ledf2+0x74>
 8000cba:	464c      	mov	r4, r9
 8000cbc:	4326      	orrs	r6, r4
 8000cbe:	d1e7      	bne.n	8000c90 <__ledf2+0x74>
 8000cc0:	e7e8      	b.n	8000c94 <__ledf2+0x78>
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	dd06      	ble.n	8000cd4 <__ledf2+0xb8>
 8000cc6:	4243      	negs	r3, r0
 8000cc8:	4158      	adcs	r0, r3
 8000cca:	2302      	movs	r3, #2
 8000ccc:	4240      	negs	r0, r0
 8000cce:	4018      	ands	r0, r3
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7e5      	b.n	8000ca0 <__ledf2+0x84>
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbe9      	blt.n	8000cac <__ledf2+0x90>
 8000cd8:	454f      	cmp	r7, r9
 8000cda:	d8db      	bhi.n	8000c94 <__ledf2+0x78>
 8000cdc:	d006      	beq.n	8000cec <__ledf2+0xd0>
 8000cde:	2000      	movs	r0, #0
 8000ce0:	454f      	cmp	r7, r9
 8000ce2:	d2dd      	bcs.n	8000ca0 <__ledf2+0x84>
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	d0e3      	beq.n	8000cb0 <__ledf2+0x94>
 8000ce8:	0008      	movs	r0, r1
 8000cea:	e7d9      	b.n	8000ca0 <__ledf2+0x84>
 8000cec:	45c4      	cmp	ip, r8
 8000cee:	d8d1      	bhi.n	8000c94 <__ledf2+0x78>
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	45c4      	cmp	ip, r8
 8000cf4:	d2d4      	bcs.n	8000ca0 <__ledf2+0x84>
 8000cf6:	e7f5      	b.n	8000ce4 <__ledf2+0xc8>
 8000cf8:	000007ff 	.word	0x000007ff

08000cfc <__aeabi_f2d>:
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	0043      	lsls	r3, r0, #1
 8000d00:	0246      	lsls	r6, r0, #9
 8000d02:	0fc4      	lsrs	r4, r0, #31
 8000d04:	20fe      	movs	r0, #254	; 0xfe
 8000d06:	0e1b      	lsrs	r3, r3, #24
 8000d08:	1c59      	adds	r1, r3, #1
 8000d0a:	0a75      	lsrs	r5, r6, #9
 8000d0c:	4208      	tst	r0, r1
 8000d0e:	d00c      	beq.n	8000d2a <__aeabi_f2d+0x2e>
 8000d10:	22e0      	movs	r2, #224	; 0xe0
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	4694      	mov	ip, r2
 8000d16:	076d      	lsls	r5, r5, #29
 8000d18:	0b36      	lsrs	r6, r6, #12
 8000d1a:	4463      	add	r3, ip
 8000d1c:	051b      	lsls	r3, r3, #20
 8000d1e:	4333      	orrs	r3, r6
 8000d20:	07e4      	lsls	r4, r4, #31
 8000d22:	4323      	orrs	r3, r4
 8000d24:	0028      	movs	r0, r5
 8000d26:	0019      	movs	r1, r3
 8000d28:	bd70      	pop	{r4, r5, r6, pc}
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d114      	bne.n	8000d58 <__aeabi_f2d+0x5c>
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d01b      	beq.n	8000d6a <__aeabi_f2d+0x6e>
 8000d32:	0028      	movs	r0, r5
 8000d34:	f000 f82a 	bl	8000d8c <__clzsi2>
 8000d38:	280a      	cmp	r0, #10
 8000d3a:	dc1c      	bgt.n	8000d76 <__aeabi_f2d+0x7a>
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	002a      	movs	r2, r5
 8000d40:	1a1b      	subs	r3, r3, r0
 8000d42:	40da      	lsrs	r2, r3
 8000d44:	0003      	movs	r3, r0
 8000d46:	3315      	adds	r3, #21
 8000d48:	409d      	lsls	r5, r3
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <__aeabi_f2d+0x88>)
 8000d4c:	0312      	lsls	r2, r2, #12
 8000d4e:	1a1b      	subs	r3, r3, r0
 8000d50:	055b      	lsls	r3, r3, #21
 8000d52:	0b16      	lsrs	r6, r2, #12
 8000d54:	0d5b      	lsrs	r3, r3, #21
 8000d56:	e7e1      	b.n	8000d1c <__aeabi_f2d+0x20>
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d009      	beq.n	8000d70 <__aeabi_f2d+0x74>
 8000d5c:	0b32      	lsrs	r2, r6, #12
 8000d5e:	2680      	movs	r6, #128	; 0x80
 8000d60:	0336      	lsls	r6, r6, #12
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <__aeabi_f2d+0x8c>)
 8000d64:	076d      	lsls	r5, r5, #29
 8000d66:	4316      	orrs	r6, r2
 8000d68:	e7d8      	b.n	8000d1c <__aeabi_f2d+0x20>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e7d5      	b.n	8000d1c <__aeabi_f2d+0x20>
 8000d70:	2600      	movs	r6, #0
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <__aeabi_f2d+0x8c>)
 8000d74:	e7d2      	b.n	8000d1c <__aeabi_f2d+0x20>
 8000d76:	0003      	movs	r3, r0
 8000d78:	002a      	movs	r2, r5
 8000d7a:	3b0b      	subs	r3, #11
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	2500      	movs	r5, #0
 8000d80:	e7e3      	b.n	8000d4a <__aeabi_f2d+0x4e>
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	00000389 	.word	0x00000389
 8000d88:	000007ff 	.word	0x000007ff

08000d8c <__clzsi2>:
 8000d8c:	211c      	movs	r1, #28
 8000d8e:	2301      	movs	r3, #1
 8000d90:	041b      	lsls	r3, r3, #16
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d301      	bcc.n	8000d9a <__clzsi2+0xe>
 8000d96:	0c00      	lsrs	r0, r0, #16
 8000d98:	3910      	subs	r1, #16
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	d301      	bcc.n	8000da4 <__clzsi2+0x18>
 8000da0:	0a00      	lsrs	r0, r0, #8
 8000da2:	3908      	subs	r1, #8
 8000da4:	091b      	lsrs	r3, r3, #4
 8000da6:	4298      	cmp	r0, r3
 8000da8:	d301      	bcc.n	8000dae <__clzsi2+0x22>
 8000daa:	0900      	lsrs	r0, r0, #4
 8000dac:	3904      	subs	r1, #4
 8000dae:	a202      	add	r2, pc, #8	; (adr r2, 8000db8 <__clzsi2+0x2c>)
 8000db0:	5c10      	ldrb	r0, [r2, r0]
 8000db2:	1840      	adds	r0, r0, r1
 8000db4:	4770      	bx	lr
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	02020304 	.word	0x02020304
 8000dbc:	01010101 	.word	0x01010101
	...

08000dc8 <I2c_vInit>:
 *  Author: Constantin Iustin
 */
#include"I2c.h"

void I2c_vInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	RCC->APB1ENR 	|= RCC_APB1ENR_I2C1EN;										/* Enable I2C clock 						*/
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <I2c_vInit+0x80>)
 8000dce:	69da      	ldr	r2, [r3, #28]
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <I2c_vInit+0x80>)
 8000dd2:	2180      	movs	r1, #128	; 0x80
 8000dd4:	0389      	lsls	r1, r1, #14
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	61da      	str	r2, [r3, #28]
	RCC->AHBENR		|= RCC_AHBENR_GPIOBEN;										/* Enable GPIO clock						*/
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <I2c_vInit+0x80>)
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <I2c_vInit+0x80>)
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	02c9      	lsls	r1, r1, #11
 8000de4:	430a      	orrs	r2, r1
 8000de6:	615a      	str	r2, [r3, #20]

	/* Configure I2C pins */
	GPIOB->MODER 	|= GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1;				/* Set PB6 and PB7 as Alternate function 	*/
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <I2c_vInit+0x84>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <I2c_vInit+0x84>)
 8000dee:	21a0      	movs	r1, #160	; 0xa0
 8000df0:	0209      	lsls	r1, r1, #8
 8000df2:	430a      	orrs	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER 	|= GPIO_OTYPER_OT_6 | GPIO_OTYPER_OT_7;						/* Set Open Drain for I2c pins PB6 and PB7 	*/
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <I2c_vInit+0x84>)
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <I2c_vInit+0x84>)
 8000dfc:	21c0      	movs	r1, #192	; 0xc0
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	605a      	str	r2, [r3, #4]
	GPIOB->AFR[0] 	|= (1 << GPIO_AFRL_AFSEL6_Pos)|(1 << GPIO_AFRL_AFSEL7_Pos); /* Set Alternate function for i2c pins		*/
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <I2c_vInit+0x84>)
 8000e04:	6a1a      	ldr	r2, [r3, #32]
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <I2c_vInit+0x84>)
 8000e08:	2188      	movs	r1, #136	; 0x88
 8000e0a:	0549      	lsls	r1, r1, #21
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	621a      	str	r2, [r3, #32]

	I2C1->CR1 		&= ~I2C_CR1_PE;												/* Disable peripheral I2C 					*/
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <I2c_vInit+0x88>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <I2c_vInit+0x88>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	438a      	bics	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
	I2C1->TIMINGR 	|= 0x00201D2B;  											/* Set Prescaler, SCLH and SCLL to have a
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <I2c_vInit+0x88>)
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <I2c_vInit+0x88>)
 8000e22:	490c      	ldr	r1, [pc, #48]	; (8000e54 <I2c_vInit+0x8c>)
 8000e24:	430a      	orrs	r2, r1
 8000e26:	611a      	str	r2, [r3, #16]
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 *	i2cclk of 100kHz						*/
	I2C1->ISR		|= I2C_ISR_TXE;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <I2c_vInit+0x88>)
 8000e2a:	699a      	ldr	r2, [r3, #24]
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <I2c_vInit+0x88>)
 8000e2e:	2101      	movs	r1, #1
 8000e30:	430a      	orrs	r2, r1
 8000e32:	619a      	str	r2, [r3, #24]
	I2C1->CR1 		|= I2C_CR1_PE;  											/* Enable peripheral I2C 					*/
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <I2c_vInit+0x88>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <I2c_vInit+0x88>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	40005400 	.word	0x40005400
 8000e54:	00201d2b 	.word	0x00201d2b

08000e58 <I2c_vStart>:


void I2c_vStart(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	/* Send Start condition */
	I2C1->CR2 |=  (I2C_CR2_START);
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <I2c_vStart+0x28>)
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <I2c_vStart+0x28>)
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	0189      	lsls	r1, r1, #6
 8000e66:	430a      	orrs	r2, r1
 8000e68:	605a      	str	r2, [r3, #4]

//	/* wait for acknowledge */
	while (I2C1->CR2 & I2C_CR2_START);
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <I2c_vStart+0x28>)
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	019b      	lsls	r3, r3, #6
 8000e74:	4013      	ands	r3, r2
 8000e76:	d1f9      	bne.n	8000e6c <I2c_vStart+0x14>
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40005400 	.word	0x40005400

08000e84 <I2c_vStop>:

void I2c_vStop(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	/* Send Stop condition */
	I2C1->CR2 |=  (I2C_CR2_STOP);
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <I2c_vStop+0x40>)
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <I2c_vStop+0x40>)
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	01c9      	lsls	r1, r1, #7
 8000e92:	430a      	orrs	r2, r1
 8000e94:	605a      	str	r2, [r3, #4]

	/* wait for acknowledge */
	while (I2C1->CR2 & I2C_CR2_STOP);
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <I2c_vStop+0x40>)
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	01db      	lsls	r3, r3, #7
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d1f9      	bne.n	8000e98 <I2c_vStop+0x14>
	// Reset the ICR ('Interrupt Clear Register') event flag.
	I2C1->ICR |=  (I2C_ICR_STOPCF);
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <I2c_vStop+0x40>)
 8000ea6:	69da      	ldr	r2, [r3, #28]
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <I2c_vStop+0x40>)
 8000eaa:	2120      	movs	r1, #32
 8000eac:	430a      	orrs	r2, r1
 8000eae:	61da      	str	r2, [r3, #28]
	while (I2C1->ICR & I2C_ICR_STOPCF);
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <I2c_vStop+0x40>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d1fa      	bne.n	8000eb2 <I2c_vStop+0x2e>
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40005400 	.word	0x40005400

08000ec8 <I2c_vRead>:

/*	read N bytes from the I2C slave */
uint8_t I2c_vRead( uint8_t slave_address, uint8_t* data, uint8_t N )
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6039      	str	r1, [r7, #0]
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	1c02      	adds	r2, r0, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	1c0a      	adds	r2, r1, #0
 8000edc:	701a      	strb	r2, [r3, #0]
	/* Set slave address. */
	I2C1->CR2   &= ~(I2C_CR2_SADD);
 8000ede:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <I2c_vRead+0xa0>)
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <I2c_vRead+0xa0>)
 8000ee4:	0a92      	lsrs	r2, r2, #10
 8000ee6:	0292      	lsls	r2, r2, #10
 8000ee8:	605a      	str	r2, [r3, #4]
	I2C1->CR2   |=  (slave_address << 1u);
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <I2c_vRead+0xa0>)
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <I2c_vRead+0xa0>)
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	605a      	str	r2, [r3, #4]
	/* Set R/W bit (1 for read)*/
	I2C1->CR2	|= 	I2C_CR2_RD_WRN;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <I2c_vRead+0xa0>)
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <I2c_vRead+0xa0>)
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	00c9      	lsls	r1, r1, #3
 8000f06:	430a      	orrs	r2, r1
 8000f08:	605a      	str	r2, [r3, #4]
	/* Set N bytes to read. */
	I2C1->CR2 &= ~(I2C_CR2_NBYTES);
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <I2c_vRead+0xa0>)
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <I2c_vRead+0xa0>)
 8000f10:	4916      	ldr	r1, [pc, #88]	; (8000f6c <I2c_vRead+0xa4>)
 8000f12:	400a      	ands	r2, r1
 8000f14:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |=  (N << I2C_CR2_NBYTES_Pos);
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <I2c_vRead+0xa0>)
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	1dbb      	adds	r3, r7, #6
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	041b      	lsls	r3, r3, #16
 8000f20:	0019      	movs	r1, r3
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <I2c_vRead+0xa0>)
 8000f24:	430a      	orrs	r2, r1
 8000f26:	605a      	str	r2, [r3, #4]

	I2c_vStart();
 8000f28:	f7ff ff96 	bl	8000e58 <I2c_vStart>

	do
	{
		/* Wait for a byte of data to be available, then read it.*/
		while (!(I2C1->ISR & I2C_ISR_RXNE));// || ((ulDelay_timeMs - t1) <= 10u));
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <I2c_vRead+0xa0>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	2204      	movs	r2, #4
 8000f34:	4013      	ands	r3, r2
 8000f36:	d0fa      	beq.n	8000f2e <I2c_vRead+0x66>
		*data = (I2C1->RXDR & 0xFF);
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <I2c_vRead+0xa0>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	701a      	strb	r2, [r3, #0]
		++data;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	603b      	str	r3, [r7, #0]
		N--;
 8000f48:	1dbb      	adds	r3, r7, #6
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	1dbb      	adds	r3, r7, #6
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
	}while(N > 0u);
 8000f52:	1dbb      	adds	r3, r7, #6
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1e8      	bne.n	8000f2c <I2c_vRead+0x64>

	I2c_vStop();
 8000f5a:	f7ff ff93 	bl	8000e84 <I2c_vStop>
	return 0;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	ff00ffff 	.word	0xff00ffff

08000f70 <I2c_vWrite>:

/* write N bytes to the I2C slave */
uint8_t I2c_vWrite( uint8_t slave_address, uint8_t* data, uint8_t N )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6039      	str	r1, [r7, #0]
 8000f78:	0011      	movs	r1, r2
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	1c02      	adds	r2, r0, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	1dbb      	adds	r3, r7, #6
 8000f82:	1c0a      	adds	r2, r1, #0
 8000f84:	701a      	strb	r2, [r3, #0]
	/* Set slave address. */
	I2C1->CR2   &= ~(I2C_CR2_SADD);
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <I2c_vWrite+0xac>)
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	4b24      	ldr	r3, [pc, #144]	; (800101c <I2c_vWrite+0xac>)
 8000f8c:	0a92      	lsrs	r2, r2, #10
 8000f8e:	0292      	lsls	r2, r2, #10
 8000f90:	605a      	str	r2, [r3, #4]
	I2C1->CR2   |=  (slave_address << 1u);
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <I2c_vWrite+0xac>)
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	0019      	movs	r1, r3
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <I2c_vWrite+0xac>)
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	605a      	str	r2, [r3, #4]
	/* Set R/W bit (0 for write) */
	I2C1->CR2	&= 	~(I2C_CR2_RD_WRN);
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <I2c_vWrite+0xac>)
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <I2c_vWrite+0xac>)
 8000faa:	491d      	ldr	r1, [pc, #116]	; (8001020 <I2c_vWrite+0xb0>)
 8000fac:	400a      	ands	r2, r1
 8000fae:	605a      	str	r2, [r3, #4]
	/* Set N bytes to write. */
	I2C1->CR2 &= ~(I2C_CR2_NBYTES);
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <I2c_vWrite+0xac>)
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <I2c_vWrite+0xac>)
 8000fb6:	491b      	ldr	r1, [pc, #108]	; (8001024 <I2c_vWrite+0xb4>)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |=  (N << I2C_CR2_NBYTES_Pos);
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <I2c_vWrite+0xac>)
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	1dbb      	adds	r3, r7, #6
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	041b      	lsls	r3, r3, #16
 8000fc6:	0019      	movs	r1, r3
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <I2c_vWrite+0xac>)
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	605a      	str	r2, [r3, #4]

	I2c_vStart();
 8000fce:	f7ff ff43 	bl	8000e58 <I2c_vStart>

	do
	{
		/* write the byte to be sent into the data register */
		I2C1->TXDR = (I2C1->TXDR & 0xFFFFFF00) | (*data);
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <I2c_vWrite+0xac>)
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	22ff      	movs	r2, #255	; 0xff
 8000fd8:	4393      	bics	r3, r2
 8000fda:	001a      	movs	r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <I2c_vWrite+0xac>)
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
		/* Wait for one of these ISR bits:
		 * 'TXIS' ("ready for next byte")
		 * 'TC'   ("transfer complete") */
		while (!(I2C1->ISR & I2C_ISR_TXE));
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <I2c_vWrite+0xac>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d0fa      	beq.n	8000fea <I2c_vWrite+0x7a>
		++data;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	603b      	str	r3, [r7, #0]
		N--;
 8000ffa:	1dbb      	adds	r3, r7, #6
 8000ffc:	781a      	ldrb	r2, [r3, #0]
 8000ffe:	1dbb      	adds	r3, r7, #6
 8001000:	3a01      	subs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
	}while(N > 0u);
 8001004:	1dbb      	adds	r3, r7, #6
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1e2      	bne.n	8000fd2 <I2c_vWrite+0x62>
	I2c_vStop();
 800100c:	f7ff ff3a 	bl	8000e84 <I2c_vStop>
	return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b002      	add	sp, #8
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40005400 	.word	0x40005400
 8001020:	fffffbff 	.word	0xfffffbff
 8001024:	ff00ffff 	.word	0xff00ffff

08001028 <VL53L0X_init>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X_init(struct VL53L0X* dev)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  // check model ID register (value specified in datasheet)
  if (VL53L0X_readReg(dev, IDENTIFICATION_MODEL_ID) != 0xEE) { return false; }
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	21c0      	movs	r1, #192	; 0xc0
 8001034:	0018      	movs	r0, r3
 8001036:	f000 fbb8 	bl	80017aa <VL53L0X_readReg>
 800103a:	0003      	movs	r3, r0
 800103c:	2bee      	cmp	r3, #238	; 0xee
 800103e:	d001      	beq.n	8001044 <VL53L0X_init+0x1c>
 8001040:	2300      	movs	r3, #0
 8001042:	e35e      	b.n	8001702 <VL53L0X_init+0x6da>

	// sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
	if (dev->io_2v8)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	785b      	ldrb	r3, [r3, #1]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00e      	beq.n	800106a <VL53L0X_init+0x42>
	{
		VL53L0X_writeReg(dev, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, VL53L0X_readReg(dev, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01 ); // set bit 0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2189      	movs	r1, #137	; 0x89
 8001050:	0018      	movs	r0, r3
 8001052:	f000 fbaa 	bl	80017aa <VL53L0X_readReg>
 8001056:	0003      	movs	r3, r0
 8001058:	001a      	movs	r2, r3
 800105a:	2301      	movs	r3, #1
 800105c:	4313      	orrs	r3, r2
 800105e:	b2da      	uxtb	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2189      	movs	r1, #137	; 0x89
 8001064:	0018      	movs	r0, r3
 8001066:	f000 fb50 	bl	800170a <VL53L0X_writeReg>
	}

	// "Set I2C standard mode"
	VL53L0X_writeReg(dev, 0x88, 0x00);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	2188      	movs	r1, #136	; 0x88
 8001070:	0018      	movs	r0, r3
 8001072:	f000 fb4a 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0x80, 0x01);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	0018      	movs	r0, r3
 800107e:	f000 fb44 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	21ff      	movs	r1, #255	; 0xff
 8001088:	0018      	movs	r0, r3
 800108a:	f000 fb3e 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x00, 0x00);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	0018      	movs	r0, r3
 8001096:	f000 fb38 	bl	800170a <VL53L0X_writeReg>
	dev->stop_variable = VL53L0X_readReg(dev, 0x91);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2191      	movs	r1, #145	; 0x91
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 fb83 	bl	80017aa <VL53L0X_readReg>
 80010a4:	0003      	movs	r3, r0
 80010a6:	001a      	movs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	741a      	strb	r2, [r3, #16]
	VL53L0X_writeReg(dev, 0x00, 0x01);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	2100      	movs	r1, #0
 80010b2:	0018      	movs	r0, r3
 80010b4:	f000 fb29 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0xFF, 0x00);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	21ff      	movs	r1, #255	; 0xff
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 fb23 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x80, 0x00);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 fb1d 	bl	800170a <VL53L0X_writeReg>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	VL53L0X_writeReg(dev, MSRC_CONFIG_CONTROL, VL53L0X_readReg(dev,  MSRC_CONFIG_CONTROL) | 0x12);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2160      	movs	r1, #96	; 0x60
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fb68 	bl	80017aa <VL53L0X_readReg>
 80010da:	0003      	movs	r3, r0
 80010dc:	001a      	movs	r2, r3
 80010de:	2312      	movs	r3, #18
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2160      	movs	r1, #96	; 0x60
 80010e8:	0018      	movs	r0, r3
 80010ea:	f000 fb0e 	bl	800170a <VL53L0X_writeReg>

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	VL53L0X_setSignalRateLimit(dev, 0.25);
 80010ee:	22fa      	movs	r2, #250	; 0xfa
 80010f0:	0592      	lsls	r2, r2, #22
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	1c11      	adds	r1, r2, #0
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 fbec 	bl	80018d4 <VL53L0X_setSignalRateLimit>

	VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	22ff      	movs	r2, #255	; 0xff
 8001100:	2101      	movs	r1, #1
 8001102:	0018      	movs	r0, r3
 8001104:	f000 fb01 	bl	800170a <VL53L0X_writeReg>

	// VL53L0X_StaticInit() begin

	uint8_t spad_count;
	bool spad_type_is_aperture;
	if (!VL53L0X_getSpadInfo(dev, &spad_count, &spad_type_is_aperture)) { return false; }
 8001108:	231a      	movs	r3, #26
 800110a:	18fa      	adds	r2, r7, r3
 800110c:	231b      	movs	r3, #27
 800110e:	18f9      	adds	r1, r7, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	0018      	movs	r0, r3
 8001114:	f000 fe24 	bl	8001d60 <VL53L0X_getSpadInfo>
 8001118:	0003      	movs	r3, r0
 800111a:	001a      	movs	r2, r3
 800111c:	2301      	movs	r3, #1
 800111e:	4053      	eors	r3, r2
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <VL53L0X_init+0x102>
 8001126:	2300      	movs	r3, #0
 8001128:	e2eb      	b.n	8001702 <VL53L0X_init+0x6da>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	uint8_t ref_spad_map[6];
	VL53L0X_readMulti(dev, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800112a:	2314      	movs	r3, #20
 800112c:	18fa      	adds	r2, r7, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	2306      	movs	r3, #6
 8001132:	21b0      	movs	r1, #176	; 0xb0
 8001134:	f000 fba8 	bl	8001888 <VL53L0X_readMulti>

	// -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

	VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	21ff      	movs	r1, #255	; 0xff
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fae3 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	214f      	movs	r1, #79	; 0x4f
 800114a:	0018      	movs	r0, r3
 800114c:	f000 fadd 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	222c      	movs	r2, #44	; 0x2c
 8001154:	214e      	movs	r1, #78	; 0x4e
 8001156:	0018      	movs	r0, r3
 8001158:	f000 fad7 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0xFF, 0x00);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	21ff      	movs	r1, #255	; 0xff
 8001162:	0018      	movs	r0, r3
 8001164:	f000 fad1 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	22b4      	movs	r2, #180	; 0xb4
 800116c:	21b6      	movs	r1, #182	; 0xb6
 800116e:	0018      	movs	r0, r3
 8001170:	f000 facb 	bl	800170a <VL53L0X_writeReg>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8001174:	231a      	movs	r3, #26
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <VL53L0X_init+0x15a>
 800117e:	220c      	movs	r2, #12
 8001180:	e000      	b.n	8001184 <VL53L0X_init+0x15c>
 8001182:	2200      	movs	r2, #0
 8001184:	231c      	movs	r3, #28
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	701a      	strb	r2, [r3, #0]
	uint8_t spads_enabled = 0;
 800118a:	231f      	movs	r3, #31
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < 48; i++)
 8001192:	231e      	movs	r3, #30
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	e049      	b.n	8001230 <VL53L0X_init+0x208>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 800119c:	231e      	movs	r3, #30
 800119e:	18fa      	adds	r2, r7, r3
 80011a0:	231c      	movs	r3, #28
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d307      	bcc.n	80011bc <VL53L0X_init+0x194>
 80011ac:	231b      	movs	r3, #27
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	221f      	movs	r2, #31
 80011b4:	18ba      	adds	r2, r7, r2
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d11a      	bne.n	80011f2 <VL53L0X_init+0x1ca>
		{
			// This bit is lower than the first one that should be enabled, or
			// (reference_spad_count) bits have already been enabled, so zero this bit
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80011bc:	211e      	movs	r1, #30
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	08db      	lsrs	r3, r3, #3
 80011c4:	b2d8      	uxtb	r0, r3
 80011c6:	0002      	movs	r2, r0
 80011c8:	2414      	movs	r4, #20
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	5c9b      	ldrb	r3, [r3, r2]
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	187a      	adds	r2, r7, r1
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	2107      	movs	r1, #7
 80011d6:	400a      	ands	r2, r1
 80011d8:	2101      	movs	r1, #1
 80011da:	4091      	lsls	r1, r2
 80011dc:	000a      	movs	r2, r1
 80011de:	b252      	sxtb	r2, r2
 80011e0:	43d2      	mvns	r2, r2
 80011e2:	b252      	sxtb	r2, r2
 80011e4:	4013      	ands	r3, r2
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	0002      	movs	r2, r0
 80011ea:	b2d9      	uxtb	r1, r3
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	5499      	strb	r1, [r3, r2]
 80011f0:	e018      	b.n	8001224 <VL53L0X_init+0x1fc>
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 80011f2:	201e      	movs	r0, #30
 80011f4:	183b      	adds	r3, r7, r0
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	08db      	lsrs	r3, r3, #3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	001a      	movs	r2, r3
 80011fe:	2314      	movs	r3, #20
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	5c9b      	ldrb	r3, [r3, r2]
 8001204:	0019      	movs	r1, r3
 8001206:	183b      	adds	r3, r7, r0
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2207      	movs	r2, #7
 800120c:	4013      	ands	r3, r2
 800120e:	4119      	asrs	r1, r3
 8001210:	000b      	movs	r3, r1
 8001212:	2201      	movs	r2, #1
 8001214:	4013      	ands	r3, r2
 8001216:	d005      	beq.n	8001224 <VL53L0X_init+0x1fc>
		{
			spads_enabled++;
 8001218:	211f      	movs	r1, #31
 800121a:	187b      	adds	r3, r7, r1
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	187b      	adds	r3, r7, r1
 8001220:	3201      	adds	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 48; i++)
 8001224:	211e      	movs	r1, #30
 8001226:	187b      	adds	r3, r7, r1
 8001228:	781a      	ldrb	r2, [r3, #0]
 800122a:	187b      	adds	r3, r7, r1
 800122c:	3201      	adds	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	231e      	movs	r3, #30
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b2f      	cmp	r3, #47	; 0x2f
 8001238:	d9b0      	bls.n	800119c <VL53L0X_init+0x174>
		}
	}

	uint8_t ref_spad_map1[7];
	ref_spad_map1[0] = GLOBAL_CONFIG_SPAD_ENABLES_REF_0;
 800123a:	230c      	movs	r3, #12
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	22b0      	movs	r2, #176	; 0xb0
 8001240:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8001242:	231d      	movs	r3, #29
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	e00f      	b.n	800126c <VL53L0X_init+0x244>
	{
		ref_spad_map1[i+1] = ref_spad_map1[i];
 800124c:	201d      	movs	r0, #29
 800124e:	183b      	adds	r3, r7, r0
 8001250:	781a      	ldrb	r2, [r3, #0]
 8001252:	183b      	adds	r3, r7, r0
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	240c      	movs	r4, #12
 800125a:	1939      	adds	r1, r7, r4
 800125c:	5c89      	ldrb	r1, [r1, r2]
 800125e:	193a      	adds	r2, r7, r4
 8001260:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 6; i++)
 8001262:	183b      	adds	r3, r7, r0
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	183b      	adds	r3, r7, r0
 8001268:	3201      	adds	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	231d      	movs	r3, #29
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b05      	cmp	r3, #5
 8001274:	d9ea      	bls.n	800124c <VL53L0X_init+0x224>
	}
	VL53L0X_writeMulti(dev, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map1, 7);
 8001276:	230c      	movs	r3, #12
 8001278:	18fa      	adds	r2, r7, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	2307      	movs	r3, #7
 800127e:	21b0      	movs	r1, #176	; 0xb0
 8001280:	f000 fae3 	bl	800184a <VL53L0X_writeMulti>
	// -- VL53L0X_set_reference_spads() end

	// -- VL53L0X_load_tuning_settings() begin
	// DefaultTuningSettings from vl53l0x_tuning.h

	VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	21ff      	movs	r1, #255	; 0xff
 800128a:	0018      	movs	r0, r3
 800128c:	f000 fa3d 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x00, 0x00);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	0018      	movs	r0, r3
 8001298:	f000 fa37 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x00);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	21ff      	movs	r1, #255	; 0xff
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 fa31 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x09, 0x00);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	2109      	movs	r1, #9
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 fa2b 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x10, 0x00);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	2110      	movs	r1, #16
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fa25 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x11, 0x00);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	2111      	movs	r1, #17
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 fa1f 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0x24, 0x01);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	2124      	movs	r1, #36	; 0x24
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fa19 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x25, 0xFF);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	22ff      	movs	r2, #255	; 0xff
 80012dc:	2125      	movs	r1, #37	; 0x25
 80012de:	0018      	movs	r0, r3
 80012e0:	f000 fa13 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x75, 0x00);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	2175      	movs	r1, #117	; 0x75
 80012ea:	0018      	movs	r0, r3
 80012ec:	f000 fa0d 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x01);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	21ff      	movs	r1, #255	; 0xff
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 fa07 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x4E, 0x2C);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	222c      	movs	r2, #44	; 0x2c
 8001300:	214e      	movs	r1, #78	; 0x4e
 8001302:	0018      	movs	r0, r3
 8001304:	f000 fa01 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x48, 0x00);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	2148      	movs	r1, #72	; 0x48
 800130e:	0018      	movs	r0, r3
 8001310:	f000 f9fb 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x30, 0x20);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2220      	movs	r2, #32
 8001318:	2130      	movs	r1, #48	; 0x30
 800131a:	0018      	movs	r0, r3
 800131c:	f000 f9f5 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	21ff      	movs	r1, #255	; 0xff
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f9ef 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x30, 0x09);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2209      	movs	r2, #9
 8001330:	2130      	movs	r1, #48	; 0x30
 8001332:	0018      	movs	r0, r3
 8001334:	f000 f9e9 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x54, 0x00);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	2154      	movs	r1, #84	; 0x54
 800133e:	0018      	movs	r0, r3
 8001340:	f000 f9e3 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x31, 0x04);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2204      	movs	r2, #4
 8001348:	2131      	movs	r1, #49	; 0x31
 800134a:	0018      	movs	r0, r3
 800134c:	f000 f9dd 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x32, 0x03);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	2132      	movs	r1, #50	; 0x32
 8001356:	0018      	movs	r0, r3
 8001358:	f000 f9d7 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x40, 0x83);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2283      	movs	r2, #131	; 0x83
 8001360:	2140      	movs	r1, #64	; 0x40
 8001362:	0018      	movs	r0, r3
 8001364:	f000 f9d1 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x46, 0x25);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2225      	movs	r2, #37	; 0x25
 800136c:	2146      	movs	r1, #70	; 0x46
 800136e:	0018      	movs	r0, r3
 8001370:	f000 f9cb 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x60, 0x00);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	2160      	movs	r1, #96	; 0x60
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f9c5 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x27, 0x00);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	2127      	movs	r1, #39	; 0x27
 8001386:	0018      	movs	r0, r3
 8001388:	f000 f9bf 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x50, 0x06);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2206      	movs	r2, #6
 8001390:	2150      	movs	r1, #80	; 0x50
 8001392:	0018      	movs	r0, r3
 8001394:	f000 f9b9 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x51, 0x00);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	2151      	movs	r1, #81	; 0x51
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 f9b3 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x52, 0x96);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2296      	movs	r2, #150	; 0x96
 80013a8:	2152      	movs	r1, #82	; 0x52
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f9ad 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x56, 0x08);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2208      	movs	r2, #8
 80013b4:	2156      	movs	r1, #86	; 0x56
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 f9a7 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x57, 0x30);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2230      	movs	r2, #48	; 0x30
 80013c0:	2157      	movs	r1, #87	; 0x57
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 f9a1 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x61, 0x00);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	2161      	movs	r1, #97	; 0x61
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 f99b 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x62, 0x00);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	2162      	movs	r1, #98	; 0x62
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 f995 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x64, 0x00);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	2164      	movs	r1, #100	; 0x64
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 f98f 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x65, 0x00);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	2165      	movs	r1, #101	; 0x65
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 f989 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x66, 0xA0);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	22a0      	movs	r2, #160	; 0xa0
 80013fc:	2166      	movs	r1, #102	; 0x66
 80013fe:	0018      	movs	r0, r3
 8001400:	f000 f983 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	21ff      	movs	r1, #255	; 0xff
 800140a:	0018      	movs	r0, r3
 800140c:	f000 f97d 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x22, 0x32);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2232      	movs	r2, #50	; 0x32
 8001414:	2122      	movs	r1, #34	; 0x22
 8001416:	0018      	movs	r0, r3
 8001418:	f000 f977 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x47, 0x14);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2214      	movs	r2, #20
 8001420:	2147      	movs	r1, #71	; 0x47
 8001422:	0018      	movs	r0, r3
 8001424:	f000 f971 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x49, 0xFF);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	22ff      	movs	r2, #255	; 0xff
 800142c:	2149      	movs	r1, #73	; 0x49
 800142e:	0018      	movs	r0, r3
 8001430:	f000 f96b 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x4A, 0x00);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	214a      	movs	r1, #74	; 0x4a
 800143a:	0018      	movs	r0, r3
 800143c:	f000 f965 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	21ff      	movs	r1, #255	; 0xff
 8001446:	0018      	movs	r0, r3
 8001448:	f000 f95f 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x7A, 0x0A);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	220a      	movs	r2, #10
 8001450:	217a      	movs	r1, #122	; 0x7a
 8001452:	0018      	movs	r0, r3
 8001454:	f000 f959 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x7B, 0x00);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	217b      	movs	r1, #123	; 0x7b
 800145e:	0018      	movs	r0, r3
 8001460:	f000 f953 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x78, 0x21);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2221      	movs	r2, #33	; 0x21
 8001468:	2178      	movs	r1, #120	; 0x78
 800146a:	0018      	movs	r0, r3
 800146c:	f000 f94d 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	21ff      	movs	r1, #255	; 0xff
 8001476:	0018      	movs	r0, r3
 8001478:	f000 f947 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x23, 0x34);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2234      	movs	r2, #52	; 0x34
 8001480:	2123      	movs	r1, #35	; 0x23
 8001482:	0018      	movs	r0, r3
 8001484:	f000 f941 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x42, 0x00);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	2142      	movs	r1, #66	; 0x42
 800148e:	0018      	movs	r0, r3
 8001490:	f000 f93b 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x44, 0xFF);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	22ff      	movs	r2, #255	; 0xff
 8001498:	2144      	movs	r1, #68	; 0x44
 800149a:	0018      	movs	r0, r3
 800149c:	f000 f935 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x45, 0x26);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2226      	movs	r2, #38	; 0x26
 80014a4:	2145      	movs	r1, #69	; 0x45
 80014a6:	0018      	movs	r0, r3
 80014a8:	f000 f92f 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x46, 0x05);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2205      	movs	r2, #5
 80014b0:	2146      	movs	r1, #70	; 0x46
 80014b2:	0018      	movs	r0, r3
 80014b4:	f000 f929 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x40, 0x40);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2240      	movs	r2, #64	; 0x40
 80014bc:	2140      	movs	r1, #64	; 0x40
 80014be:	0018      	movs	r0, r3
 80014c0:	f000 f923 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x0E, 0x06);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2206      	movs	r2, #6
 80014c8:	210e      	movs	r1, #14
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 f91d 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x20, 0x1A);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	221a      	movs	r2, #26
 80014d4:	2120      	movs	r1, #32
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 f917 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x43, 0x40);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2240      	movs	r2, #64	; 0x40
 80014e0:	2143      	movs	r1, #67	; 0x43
 80014e2:	0018      	movs	r0, r3
 80014e4:	f000 f911 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x00);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	21ff      	movs	r1, #255	; 0xff
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 f90b 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x34, 0x03);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	2134      	movs	r1, #52	; 0x34
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 f905 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x35, 0x44);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2244      	movs	r2, #68	; 0x44
 8001504:	2135      	movs	r1, #53	; 0x35
 8001506:	0018      	movs	r0, r3
 8001508:	f000 f8ff 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x01);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	21ff      	movs	r1, #255	; 0xff
 8001512:	0018      	movs	r0, r3
 8001514:	f000 f8f9 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x31, 0x04);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2204      	movs	r2, #4
 800151c:	2131      	movs	r1, #49	; 0x31
 800151e:	0018      	movs	r0, r3
 8001520:	f000 f8f3 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x4B, 0x09);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2209      	movs	r2, #9
 8001528:	214b      	movs	r1, #75	; 0x4b
 800152a:	0018      	movs	r0, r3
 800152c:	f000 f8ed 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x4C, 0x05);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2205      	movs	r2, #5
 8001534:	214c      	movs	r1, #76	; 0x4c
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f8e7 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x4D, 0x04);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2204      	movs	r2, #4
 8001540:	214d      	movs	r1, #77	; 0x4d
 8001542:	0018      	movs	r0, r3
 8001544:	f000 f8e1 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	21ff      	movs	r1, #255	; 0xff
 800154e:	0018      	movs	r0, r3
 8001550:	f000 f8db 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x44, 0x00);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	2144      	movs	r1, #68	; 0x44
 800155a:	0018      	movs	r0, r3
 800155c:	f000 f8d5 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x45, 0x20);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	2145      	movs	r1, #69	; 0x45
 8001566:	0018      	movs	r0, r3
 8001568:	f000 f8cf 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x47, 0x08);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2208      	movs	r2, #8
 8001570:	2147      	movs	r1, #71	; 0x47
 8001572:	0018      	movs	r0, r3
 8001574:	f000 f8c9 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x48, 0x28);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2228      	movs	r2, #40	; 0x28
 800157c:	2148      	movs	r1, #72	; 0x48
 800157e:	0018      	movs	r0, r3
 8001580:	f000 f8c3 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x67, 0x00);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	2167      	movs	r1, #103	; 0x67
 800158a:	0018      	movs	r0, r3
 800158c:	f000 f8bd 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x70, 0x04);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2204      	movs	r2, #4
 8001594:	2170      	movs	r1, #112	; 0x70
 8001596:	0018      	movs	r0, r3
 8001598:	f000 f8b7 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x71, 0x01);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	2171      	movs	r1, #113	; 0x71
 80015a2:	0018      	movs	r0, r3
 80015a4:	f000 f8b1 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x72, 0xFE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	22fe      	movs	r2, #254	; 0xfe
 80015ac:	2172      	movs	r1, #114	; 0x72
 80015ae:	0018      	movs	r0, r3
 80015b0:	f000 f8ab 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x76, 0x00);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	2176      	movs	r1, #118	; 0x76
 80015ba:	0018      	movs	r0, r3
 80015bc:	f000 f8a5 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x77, 0x00);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	2177      	movs	r1, #119	; 0x77
 80015c6:	0018      	movs	r0, r3
 80015c8:	f000 f89f 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x01);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	21ff      	movs	r1, #255	; 0xff
 80015d2:	0018      	movs	r0, r3
 80015d4:	f000 f899 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x0D, 0x01);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	210d      	movs	r1, #13
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 f893 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x00);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	21ff      	movs	r1, #255	; 0xff
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 f88d 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x80, 0x01);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 f887 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x01, 0xF8);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	22f8      	movs	r2, #248	; 0xf8
 8001600:	2101      	movs	r1, #1
 8001602:	0018      	movs	r0, r3
 8001604:	f000 f881 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	21ff      	movs	r1, #255	; 0xff
 800160e:	0018      	movs	r0, r3
 8001610:	f000 f87b 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x8E, 0x01);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	218e      	movs	r1, #142	; 0x8e
 800161a:	0018      	movs	r0, r3
 800161c:	f000 f875 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x00, 0x01);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	2100      	movs	r1, #0
 8001626:	0018      	movs	r0, r3
 8001628:	f000 f86f 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0xFF, 0x00);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	21ff      	movs	r1, #255	; 0xff
 8001632:	0018      	movs	r0, r3
 8001634:	f000 f869 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x80, 0x00);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	0018      	movs	r0, r3
 8001640:	f000 f863 	bl	800170a <VL53L0X_writeReg>
	// -- VL53L0X_load_tuning_settings() end

			// "Set interrupt config to new sample ready"
	// -- VL53L0X_SetGpioConfig() begin

	VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2204      	movs	r2, #4
 8001648:	210a      	movs	r1, #10
 800164a:	0018      	movs	r0, r3
 800164c:	f000 f85d 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, GPIO_HV_MUX_ACTIVE_HIGH, VL53L0X_readReg(dev,  GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2184      	movs	r1, #132	; 0x84
 8001654:	0018      	movs	r0, r3
 8001656:	f000 f8a8 	bl	80017aa <VL53L0X_readReg>
 800165a:	0003      	movs	r3, r0
 800165c:	001a      	movs	r2, r3
 800165e:	2310      	movs	r3, #16
 8001660:	439a      	bics	r2, r3
 8001662:	0013      	movs	r3, r2
 8001664:	b2da      	uxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2184      	movs	r1, #132	; 0x84
 800166a:	0018      	movs	r0, r3
 800166c:	f000 f84d 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	210b      	movs	r1, #11
 8001676:	0018      	movs	r0, r3
 8001678:	f000 f847 	bl	800170a <VL53L0X_writeReg>

	// -- VL53L0X_SetGpioConfig() end

	dev->measurement_timing_budget_us = VL53L0X_getMeasurementTimingBudget(dev);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	0018      	movs	r0, r3
 8001680:	f000 fa22 	bl	8001ac8 <VL53L0X_getMeasurementTimingBudget>
 8001684:	0002      	movs	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	615a      	str	r2, [r3, #20]
	// "Disable MSRC and TCC by default"
	// MSRC = Minimum Signal Rate Check
	// TCC = Target CentreCheck
	// -- VL53L0X_SetSequenceStepEnable() begin

	VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	22e8      	movs	r2, #232	; 0xe8
 800168e:	2101      	movs	r1, #1
 8001690:	0018      	movs	r0, r3
 8001692:	f000 f83a 	bl	800170a <VL53L0X_writeReg>

	// -- VL53L0X_SetSequenceStepEnable() end

	// "Recalculate timing budget"
	VL53L0X_setMeasurementTimingBudget(dev, dev->measurement_timing_budget_us);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	0011      	movs	r1, r2
 800169e:	0018      	movs	r0, r3
 80016a0:	f000 f948 	bl	8001934 <VL53L0X_setMeasurementTimingBudget>

	// VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

	// -- VL53L0X_perform_vhv_calibration() begin

	VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x01);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	2101      	movs	r1, #1
 80016aa:	0018      	movs	r0, r3
 80016ac:	f000 f82d 	bl	800170a <VL53L0X_writeReg>
	if (!VL53L0X_performSingleRefCalibration(dev, 0x40)) { return false; }
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2140      	movs	r1, #64	; 0x40
 80016b4:	0018      	movs	r0, r3
 80016b6:	f000 fd77 	bl	80021a8 <VL53L0X_performSingleRefCalibration>
 80016ba:	0003      	movs	r3, r0
 80016bc:	001a      	movs	r2, r3
 80016be:	2301      	movs	r3, #1
 80016c0:	4053      	eors	r3, r2
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <VL53L0X_init+0x6a4>
 80016c8:	2300      	movs	r3, #0
 80016ca:	e01a      	b.n	8001702 <VL53L0X_init+0x6da>

	// -- VL53L0X_perform_vhv_calibration() end

	// -- VL53L0X_perform_phase_calibration() begin

	VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x02);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	2101      	movs	r1, #1
 80016d2:	0018      	movs	r0, r3
 80016d4:	f000 f819 	bl	800170a <VL53L0X_writeReg>
	if (!VL53L0X_performSingleRefCalibration(dev, 0x00)) { return false; }
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2100      	movs	r1, #0
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 fd63 	bl	80021a8 <VL53L0X_performSingleRefCalibration>
 80016e2:	0003      	movs	r3, r0
 80016e4:	001a      	movs	r2, r3
 80016e6:	2301      	movs	r3, #1
 80016e8:	4053      	eors	r3, r2
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <VL53L0X_init+0x6cc>
 80016f0:	2300      	movs	r3, #0
 80016f2:	e006      	b.n	8001702 <VL53L0X_init+0x6da>

	// -- VL53L0X_perform_phase_calibration() end

	// "restore the previous Sequence Config"
	VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	22e8      	movs	r2, #232	; 0xe8
 80016f8:	2101      	movs	r1, #1
 80016fa:	0018      	movs	r0, r3
 80016fc:	f000 f805 	bl	800170a <VL53L0X_writeReg>

	// VL53L0X_PerformRefCalibration() end

	return true;
 8001700:	2301      	movs	r3, #1
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b009      	add	sp, #36	; 0x24
 8001708:	bd90      	pop	{r4, r7, pc}

0800170a <VL53L0X_writeReg>:

// Write an 8-bit register
void VL53L0X_writeReg(struct VL53L0X* dev, uint8_t reg, uint8_t value)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	0008      	movs	r0, r1
 8001714:	0011      	movs	r1, r2
 8001716:	1cfb      	adds	r3, r7, #3
 8001718:	1c02      	adds	r2, r0, #0
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	1cbb      	adds	r3, r7, #2
 800171e:	1c0a      	adds	r2, r1, #0
 8001720:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = reg;
 8001722:	210c      	movs	r1, #12
 8001724:	187b      	adds	r3, r7, r1
 8001726:	1cfa      	adds	r2, r7, #3
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	701a      	strb	r2, [r3, #0]
	buf[1] = value;
 800172c:	187b      	adds	r3, r7, r1
 800172e:	1cba      	adds	r2, r7, #2
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	705a      	strb	r2, [r3, #1]
	dev->last_status = I2c_vWrite(dev->address, buf, 2);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	789b      	ldrb	r3, [r3, #2]
 8001738:	1879      	adds	r1, r7, r1
 800173a:	2202      	movs	r2, #2
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff fc17 	bl	8000f70 <I2c_vWrite>
 8001742:	0003      	movs	r3, r0
 8001744:	001a      	movs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	701a      	strb	r2, [r3, #0]
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}

08001752 <VL53L0X_writeReg16Bit>:

// Write a 16-bit register
void VL53L0X_writeReg16Bit(struct VL53L0X* dev, uint8_t reg, uint16_t value)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	0008      	movs	r0, r1
 800175c:	0011      	movs	r1, r2
 800175e:	1cfb      	adds	r3, r7, #3
 8001760:	1c02      	adds	r2, r0, #0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	003b      	movs	r3, r7
 8001766:	1c0a      	adds	r2, r1, #0
 8001768:	801a      	strh	r2, [r3, #0]
	uint8_t buf[3];
	buf[0] = reg;
 800176a:	210c      	movs	r1, #12
 800176c:	187b      	adds	r3, r7, r1
 800176e:	1cfa      	adds	r2, r7, #3
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t) (value >> 8);
 8001774:	003b      	movs	r3, r7
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	187b      	adds	r3, r7, r1
 8001780:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t) (value & 0xFF);
 8001782:	003b      	movs	r3, r7
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	187b      	adds	r3, r7, r1
 800178a:	709a      	strb	r2, [r3, #2]
	dev->last_status = I2c_vWrite(dev->address, buf, 3);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	789b      	ldrb	r3, [r3, #2]
 8001790:	1879      	adds	r1, r7, r1
 8001792:	2203      	movs	r2, #3
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff fbeb 	bl	8000f70 <I2c_vWrite>
 800179a:	0003      	movs	r3, r0
 800179c:	001a      	movs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	701a      	strb	r2, [r3, #0]
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b004      	add	sp, #16
 80017a8:	bd80      	pop	{r7, pc}

080017aa <VL53L0X_readReg>:
	dev->last_status = I2c_vWrite(dev->address, buf, 5);
}

// Read an 8-bit register
uint8_t VL53L0X_readReg(struct VL53L0X* dev, uint8_t reg)
{
 80017aa:	b590      	push	{r4, r7, lr}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	000a      	movs	r2, r1
 80017b4:	1cfb      	adds	r3, r7, #3
 80017b6:	701a      	strb	r2, [r3, #0]
	uint8_t value;
	I2c_vWrite(dev->address, &reg, 1);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	789b      	ldrb	r3, [r3, #2]
 80017bc:	1cf9      	adds	r1, r7, #3
 80017be:	2201      	movs	r2, #1
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff fbd5 	bl	8000f70 <I2c_vWrite>
	dev->last_status = I2c_vRead(dev->address, &value, 1);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	789b      	ldrb	r3, [r3, #2]
 80017ca:	240f      	movs	r4, #15
 80017cc:	1939      	adds	r1, r7, r4
 80017ce:	2201      	movs	r2, #1
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff fb79 	bl	8000ec8 <I2c_vRead>
 80017d6:	0003      	movs	r3, r0
 80017d8:	001a      	movs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	701a      	strb	r2, [r3, #0]
	return value;
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	781b      	ldrb	r3, [r3, #0]
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b005      	add	sp, #20
 80017e8:	bd90      	pop	{r4, r7, pc}

080017ea <VL53L0X_readReg16Bit>:

// Read a 16-bit register
uint16_t VL53L0X_readReg16Bit(struct VL53L0X* dev, uint8_t reg)
{
 80017ea:	b590      	push	{r4, r7, lr}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	000a      	movs	r2, r1
 80017f4:	1cfb      	adds	r3, r7, #3
 80017f6:	701a      	strb	r2, [r3, #0]
	uint16_t value;
	uint8_t buf[2];
	I2c_vWrite(dev->address, &reg, 1);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	789b      	ldrb	r3, [r3, #2]
 80017fc:	1cf9      	adds	r1, r7, #3
 80017fe:	2201      	movs	r2, #1
 8001800:	0018      	movs	r0, r3
 8001802:	f7ff fbb5 	bl	8000f70 <I2c_vWrite>
	dev->last_status = I2c_vRead(dev->address, buf, 2);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	789b      	ldrb	r3, [r3, #2]
 800180a:	240c      	movs	r4, #12
 800180c:	1939      	adds	r1, r7, r4
 800180e:	2202      	movs	r2, #2
 8001810:	0018      	movs	r0, r3
 8001812:	f7ff fb59 	bl	8000ec8 <I2c_vRead>
 8001816:	0003      	movs	r3, r0
 8001818:	001a      	movs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	701a      	strb	r2, [r3, #0]
	value = (uint16_t) ( buf[0] << 8 );
 800181e:	0021      	movs	r1, r4
 8001820:	187b      	adds	r3, r7, r1
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b29a      	uxth	r2, r3
 8001826:	200e      	movs	r0, #14
 8001828:	183b      	adds	r3, r7, r0
 800182a:	0212      	lsls	r2, r2, #8
 800182c:	801a      	strh	r2, [r3, #0]
	value |= (uint16_t) buf[1];
 800182e:	187b      	adds	r3, r7, r1
 8001830:	785b      	ldrb	r3, [r3, #1]
 8001832:	b299      	uxth	r1, r3
 8001834:	183b      	adds	r3, r7, r0
 8001836:	183a      	adds	r2, r7, r0
 8001838:	8812      	ldrh	r2, [r2, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	801a      	strh	r2, [r3, #0]
	return value;
 800183e:	183b      	adds	r3, r7, r0
 8001840:	881b      	ldrh	r3, [r3, #0]
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b005      	add	sp, #20
 8001848:	bd90      	pop	{r4, r7, pc}

0800184a <VL53L0X_writeMulti>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X_writeMulti(struct VL53L0X* dev, uint8_t reg, uint8_t* src, uint8_t count)
{
 800184a:	b590      	push	{r4, r7, lr}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	0008      	movs	r0, r1
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	0019      	movs	r1, r3
 8001858:	230b      	movs	r3, #11
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	1c02      	adds	r2, r0, #0
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	240a      	movs	r4, #10
 8001862:	193b      	adds	r3, r7, r4
 8001864:	1c0a      	adds	r2, r1, #0
 8001866:	701a      	strb	r2, [r3, #0]
//	I2c_vWrite(dev->address, &reg, 1);
	dev->last_status = I2c_vWrite(dev->address, src, count);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	7898      	ldrb	r0, [r3, #2]
 800186c:	193b      	adds	r3, r7, r4
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	0019      	movs	r1, r3
 8001874:	f7ff fb7c 	bl	8000f70 <I2c_vWrite>
 8001878:	0003      	movs	r3, r0
 800187a:	001a      	movs	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	701a      	strb	r2, [r3, #0]
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b005      	add	sp, #20
 8001886:	bd90      	pop	{r4, r7, pc}

08001888 <VL53L0X_readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X_readMulti(struct VL53L0X* dev, uint8_t reg, uint8_t * dst, uint8_t count)
{
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	0008      	movs	r0, r1
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	0019      	movs	r1, r3
 8001896:	240b      	movs	r4, #11
 8001898:	193b      	adds	r3, r7, r4
 800189a:	1c02      	adds	r2, r0, #0
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	250a      	movs	r5, #10
 80018a0:	197b      	adds	r3, r7, r5
 80018a2:	1c0a      	adds	r2, r1, #0
 80018a4:	701a      	strb	r2, [r3, #0]
	I2c_vWrite(dev->address, &reg, 1);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	789b      	ldrb	r3, [r3, #2]
 80018aa:	1939      	adds	r1, r7, r4
 80018ac:	2201      	movs	r2, #1
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7ff fb5e 	bl	8000f70 <I2c_vWrite>
	dev->last_status = I2c_vRead(dev->address, dst, count);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	7898      	ldrb	r0, [r3, #2]
 80018b8:	197b      	adds	r3, r7, r5
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	0019      	movs	r1, r3
 80018c0:	f7ff fb02 	bl	8000ec8 <I2c_vRead>
 80018c4:	0003      	movs	r3, r0
 80018c6:	001a      	movs	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	701a      	strb	r2, [r3, #0]
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b004      	add	sp, #16
 80018d2:	bdb0      	pop	{r4, r5, r7, pc}

080018d4 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X_setSignalRateLimit(struct VL53L0X* dev, float limit_Mcps)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
	if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80018de:	2100      	movs	r1, #0
 80018e0:	6838      	ldr	r0, [r7, #0]
 80018e2:	f7fe fced 	bl	80002c0 <__aeabi_fcmplt>
 80018e6:	1e03      	subs	r3, r0, #0
 80018e8:	d108      	bne.n	80018fc <VL53L0X_setSignalRateLimit+0x28>
 80018ea:	6838      	ldr	r0, [r7, #0]
 80018ec:	f7ff fa06 	bl	8000cfc <__aeabi_f2d>
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <VL53L0X_setSignalRateLimit+0x58>)
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <VL53L0X_setSignalRateLimit+0x5c>)
 80018f4:	f7fe fcbe 	bl	8000274 <__aeabi_dcmpgt>
 80018f8:	1e03      	subs	r3, r0, #0
 80018fa:	d001      	beq.n	8001900 <VL53L0X_setSignalRateLimit+0x2c>
 80018fc:	2300      	movs	r3, #0
 80018fe:	e010      	b.n	8001922 <VL53L0X_setSignalRateLimit+0x4e>

	// Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8001900:	2186      	movs	r1, #134	; 0x86
 8001902:	05c9      	lsls	r1, r1, #23
 8001904:	6838      	ldr	r0, [r7, #0]
 8001906:	f7fe fdd9 	bl	80004bc <__aeabi_fmul>
 800190a:	1c03      	adds	r3, r0, #0
 800190c:	1c18      	adds	r0, r3, #0
 800190e:	f7fe fcff 	bl	8000310 <__aeabi_f2uiz>
 8001912:	0003      	movs	r3, r0
 8001914:	b29a      	uxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2144      	movs	r1, #68	; 0x44
 800191a:	0018      	movs	r0, r3
 800191c:	f7ff ff19 	bl	8001752 <VL53L0X_writeReg16Bit>
	return true;
 8001920:	2301      	movs	r3, #1
}
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	b002      	add	sp, #8
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	0a3d70a4 	.word	0x0a3d70a4
 8001930:	407fffd7 	.word	0x407fffd7

08001934 <VL53L0X_setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X_setMeasurementTimingBudget(struct VL53L0X* dev, uint32_t budget_us)
{
 8001934:	b5b0      	push	{r4, r5, r7, lr}
 8001936:	b092      	sub	sp, #72	; 0x48
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	struct VL53L0X_SequenceStepEnables enables;
	struct VL53L0X_SequenceStepTimeouts timeouts;

	uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 800193e:	2340      	movs	r3, #64	; 0x40
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	22a5      	movs	r2, #165	; 0xa5
 8001944:	00d2      	lsls	r2, r2, #3
 8001946:	801a      	strh	r2, [r3, #0]
	uint16_t const EndOverhead        = 960;
 8001948:	233e      	movs	r3, #62	; 0x3e
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	22f0      	movs	r2, #240	; 0xf0
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	801a      	strh	r2, [r3, #0]
	uint16_t const MsrcOverhead       = 660;
 8001952:	233c      	movs	r3, #60	; 0x3c
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	22a5      	movs	r2, #165	; 0xa5
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	801a      	strh	r2, [r3, #0]
	uint16_t const TccOverhead        = 590;
 800195c:	233a      	movs	r3, #58	; 0x3a
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	4a55      	ldr	r2, [pc, #340]	; (8001ab8 <VL53L0X_setMeasurementTimingBudget+0x184>)
 8001962:	801a      	strh	r2, [r3, #0]
	uint16_t const DssOverhead        = 690;
 8001964:	2338      	movs	r3, #56	; 0x38
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	4a54      	ldr	r2, [pc, #336]	; (8001abc <VL53L0X_setMeasurementTimingBudget+0x188>)
 800196a:	801a      	strh	r2, [r3, #0]
	uint16_t const PreRangeOverhead   = 660;
 800196c:	2336      	movs	r3, #54	; 0x36
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	22a5      	movs	r2, #165	; 0xa5
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	801a      	strh	r2, [r3, #0]
	uint16_t const FinalRangeOverhead = 550;
 8001976:	2334      	movs	r3, #52	; 0x34
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	4a51      	ldr	r2, [pc, #324]	; (8001ac0 <VL53L0X_setMeasurementTimingBudget+0x18c>)
 800197c:	801a      	strh	r2, [r3, #0]

	uint32_t const MinTimingBudget = 20000;
 800197e:	4b51      	ldr	r3, [pc, #324]	; (8001ac4 <VL53L0X_setMeasurementTimingBudget+0x190>)
 8001980:	633b      	str	r3, [r7, #48]	; 0x30

	if (budget_us < MinTimingBudget) { return false; }
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001986:	429a      	cmp	r2, r3
 8001988:	d201      	bcs.n	800198e <VL53L0X_setMeasurementTimingBudget+0x5a>
 800198a:	2300      	movs	r3, #0
 800198c:	e090      	b.n	8001ab0 <VL53L0X_setMeasurementTimingBudget+0x17c>

	uint32_t used_budget_us = StartOverhead + EndOverhead;
 800198e:	2340      	movs	r3, #64	; 0x40
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	881a      	ldrh	r2, [r3, #0]
 8001994:	233e      	movs	r3, #62	; 0x3e
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	18d3      	adds	r3, r2, r3
 800199c:	647b      	str	r3, [r7, #68]	; 0x44

	VL53L0X_getSequenceStepEnables(dev, &enables);
 800199e:	2424      	movs	r4, #36	; 0x24
 80019a0:	193a      	adds	r2, r7, r4
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	0011      	movs	r1, r2
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 fa95 	bl	8001ed6 <VL53L0X_getSequenceStepEnables>
	VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 80019ac:	250c      	movs	r5, #12
 80019ae:	197a      	adds	r2, r7, r5
 80019b0:	1939      	adds	r1, r7, r4
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f000 fadd 	bl	8001f74 <VL53L0X_getSequenceStepTimeouts>

	if (enables.tcc)
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d008      	beq.n	80019d4 <VL53L0X_setMeasurementTimingBudget+0xa0>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80019c2:	197b      	adds	r3, r7, r5
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	233a      	movs	r3, #58	; 0x3a
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	18d3      	adds	r3, r2, r3
 80019ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019d0:	18d3      	adds	r3, r2, r3
 80019d2:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.dss)
 80019d4:	2324      	movs	r3, #36	; 0x24
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	789b      	ldrb	r3, [r3, #2]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <VL53L0X_setMeasurementTimingBudget+0xc2>
	{
		used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80019de:	230c      	movs	r3, #12
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	2338      	movs	r3, #56	; 0x38
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	18d3      	adds	r3, r2, r3
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	647b      	str	r3, [r7, #68]	; 0x44
 80019f4:	e00e      	b.n	8001a14 <VL53L0X_setMeasurementTimingBudget+0xe0>
	}
	else if (enables.msrc)
 80019f6:	2324      	movs	r3, #36	; 0x24
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	785b      	ldrb	r3, [r3, #1]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <VL53L0X_setMeasurementTimingBudget+0xe0>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001a00:	230c      	movs	r3, #12
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	233c      	movs	r3, #60	; 0x3c
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	18d3      	adds	r3, r2, r3
 8001a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a10:	18d3      	adds	r3, r2, r3
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.pre_range)
 8001a14:	2324      	movs	r3, #36	; 0x24
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	78db      	ldrb	r3, [r3, #3]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <VL53L0X_setMeasurementTimingBudget+0xfe>
	{
		used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001a1e:	230c      	movs	r3, #12
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	2336      	movs	r3, #54	; 0x36
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	18d3      	adds	r3, r2, r3
 8001a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a2e:	18d3      	adds	r3, r2, r3
 8001a30:	647b      	str	r3, [r7, #68]	; 0x44
	}

	if (enables.final_range)
 8001a32:	2324      	movs	r3, #36	; 0x24
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	791b      	ldrb	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d038      	beq.n	8001aae <VL53L0X_setMeasurementTimingBudget+0x17a>
	{
		used_budget_us += FinalRangeOverhead;
 8001a3c:	2334      	movs	r3, #52	; 0x34
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
		// budget and the sum of all other timeouts within the sequence.
		// If there is no room for the final range timeout, then an error
		// will be set. Otherwise the remaining time will be applied to
		// the final range."

		if (used_budget_us > budget_us)
 8001a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d901      	bls.n	8001a54 <VL53L0X_setMeasurementTimingBudget+0x120>
		{
			// "Requested timeout too big."
			return false;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e02d      	b.n	8001ab0 <VL53L0X_setMeasurementTimingBudget+0x17c>
		}

		uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		// "For the final range timeout, the pre-range timeout
		//  must be added. To do this both final and pre-range
		//  timeouts must be expressed in macro periods MClks
		//  because they have different vcsel periods."

		uint16_t final_range_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 8001a5c:	240c      	movs	r4, #12
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	885b      	ldrh	r3, [r3, #2]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	0011      	movs	r1, r2
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 fb6d 	bl	8002148 <VL53L0X_timeoutMicrosecondsToMclks>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	2042      	movs	r0, #66	; 0x42
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	801a      	strh	r2, [r3, #0]

		if (enables.pre_range)
 8001a76:	2324      	movs	r3, #36	; 0x24
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	78db      	ldrb	r3, [r3, #3]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <VL53L0X_setMeasurementTimingBudget+0x15a>
		{
			final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	88d9      	ldrh	r1, [r3, #6]
 8001a84:	183b      	adds	r3, r7, r0
 8001a86:	183a      	adds	r2, r7, r0
 8001a88:	8812      	ldrh	r2, [r2, #0]
 8001a8a:	188a      	adds	r2, r1, r2
 8001a8c:	801a      	strh	r2, [r3, #0]
		}

		VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, VL53L0X_encodeTimeout(final_range_timeout_mclks));
 8001a8e:	2342      	movs	r3, #66	; 0x42
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f000 faf4 	bl	8002082 <VL53L0X_encodeTimeout>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2171      	movs	r1, #113	; 0x71
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f7ff fe55 	bl	8001752 <VL53L0X_writeReg16Bit>

		// set_sequence_step_timeout() end

		dev->measurement_timing_budget_us = budget_us; // store for internal reuse
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	615a      	str	r2, [r3, #20]
	}
	return true;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b012      	add	sp, #72	; 0x48
 8001ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab8:	0000024e 	.word	0x0000024e
 8001abc:	000002b2 	.word	0x000002b2
 8001ac0:	00000226 	.word	0x00000226
 8001ac4:	00004e20 	.word	0x00004e20

08001ac8 <VL53L0X_getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X_getMeasurementTimingBudget(struct VL53L0X* dev)
{
 8001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aca:	b08f      	sub	sp, #60	; 0x3c
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	struct VL53L0X_SequenceStepEnables enables;
	struct VL53L0X_SequenceStepTimeouts timeouts;

	uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8001ad0:	2132      	movs	r1, #50	; 0x32
 8001ad2:	187b      	adds	r3, r7, r1
 8001ad4:	4a41      	ldr	r2, [pc, #260]	; (8001bdc <VL53L0X_getMeasurementTimingBudget+0x114>)
 8001ad6:	801a      	strh	r2, [r3, #0]
	uint16_t const EndOverhead        = 960;
 8001ad8:	2030      	movs	r0, #48	; 0x30
 8001ada:	183b      	adds	r3, r7, r0
 8001adc:	22f0      	movs	r2, #240	; 0xf0
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	801a      	strh	r2, [r3, #0]
	uint16_t const MsrcOverhead       = 660;
 8001ae2:	232e      	movs	r3, #46	; 0x2e
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	22a5      	movs	r2, #165	; 0xa5
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	801a      	strh	r2, [r3, #0]
	uint16_t const TccOverhead        = 590;
 8001aec:	252c      	movs	r5, #44	; 0x2c
 8001aee:	197b      	adds	r3, r7, r5
 8001af0:	4a3b      	ldr	r2, [pc, #236]	; (8001be0 <VL53L0X_getMeasurementTimingBudget+0x118>)
 8001af2:	801a      	strh	r2, [r3, #0]
	uint16_t const DssOverhead        = 690;
 8001af4:	232a      	movs	r3, #42	; 0x2a
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <VL53L0X_getMeasurementTimingBudget+0x11c>)
 8001afa:	801a      	strh	r2, [r3, #0]
	uint16_t const PreRangeOverhead   = 660;
 8001afc:	2328      	movs	r3, #40	; 0x28
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	22a5      	movs	r2, #165	; 0xa5
 8001b02:	0092      	lsls	r2, r2, #2
 8001b04:	801a      	strh	r2, [r3, #0]
	uint16_t const FinalRangeOverhead = 550;
 8001b06:	2326      	movs	r3, #38	; 0x26
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	4a37      	ldr	r2, [pc, #220]	; (8001be8 <VL53L0X_getMeasurementTimingBudget+0x120>)
 8001b0c:	801a      	strh	r2, [r3, #0]

	// "Start and end overhead times always present"
	uint32_t budget_us = StartOverhead + EndOverhead;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	183b      	adds	r3, r7, r0
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	18d3      	adds	r3, r2, r3
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34

	VL53L0X_getSequenceStepEnables(dev, &enables);
 8001b1a:	2420      	movs	r4, #32
 8001b1c:	193a      	adds	r2, r7, r4
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	0011      	movs	r1, r2
 8001b22:	0018      	movs	r0, r3
 8001b24:	f000 f9d7 	bl	8001ed6 <VL53L0X_getSequenceStepEnables>
	VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 8001b28:	2608      	movs	r6, #8
 8001b2a:	19ba      	adds	r2, r7, r6
 8001b2c:	1939      	adds	r1, r7, r4
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f000 fa1f 	bl	8001f74 <VL53L0X_getSequenceStepTimeouts>

	if (enables.tcc)
 8001b36:	193b      	adds	r3, r7, r4
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <VL53L0X_getMeasurementTimingBudget+0x86>
	{
		budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001b3e:	19bb      	adds	r3, r7, r6
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	197b      	adds	r3, r7, r5
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	18d3      	adds	r3, r2, r3
 8001b48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b4a:	18d3      	adds	r3, r2, r3
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (enables.dss)
 8001b4e:	2320      	movs	r3, #32
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	789b      	ldrb	r3, [r3, #2]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00b      	beq.n	8001b70 <VL53L0X_getMeasurementTimingBudget+0xa8>
	{
		budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001b58:	2308      	movs	r3, #8
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	232a      	movs	r3, #42	; 0x2a
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b6a:	18d3      	adds	r3, r2, r3
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b6e:	e00e      	b.n	8001b8e <VL53L0X_getMeasurementTimingBudget+0xc6>
	}
	else if (enables.msrc)
 8001b70:	2320      	movs	r3, #32
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	785b      	ldrb	r3, [r3, #1]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <VL53L0X_getMeasurementTimingBudget+0xc6>
	{
		budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001b7a:	2308      	movs	r3, #8
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	232e      	movs	r3, #46	; 0x2e
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	18d3      	adds	r3, r2, r3
 8001b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b8a:	18d3      	adds	r3, r2, r3
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (enables.pre_range)
 8001b8e:	2320      	movs	r3, #32
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	78db      	ldrb	r3, [r3, #3]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <VL53L0X_getMeasurementTimingBudget+0xe4>
	{
		budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001b98:	2308      	movs	r3, #8
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	2328      	movs	r3, #40	; 0x28
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	18d3      	adds	r3, r2, r3
 8001ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ba8:	18d3      	adds	r3, r2, r3
 8001baa:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (enables.final_range)
 8001bac:	2320      	movs	r3, #32
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <VL53L0X_getMeasurementTimingBudget+0x102>
	{
		budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	2326      	movs	r3, #38	; 0x26
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	18d3      	adds	r3, r2, r3
 8001bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bc6:	18d3      	adds	r3, r2, r3
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
	}

	dev->measurement_timing_budget_us = budget_us; // store for internal reuse
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bce:	615a      	str	r2, [r3, #20]
	return budget_us;
 8001bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b00f      	add	sp, #60	; 0x3c
 8001bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	00000776 	.word	0x00000776
 8001be0:	0000024e 	.word	0x0000024e
 8001be4:	000002b2 	.word	0x000002b2
 8001be8:	00000226 	.word	0x00000226

08001bec <VL53L0X_getVcselPulsePeriod>:
}

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X_getVcselPulsePeriod(struct VL53L0X* dev, enum VL53L0X_vcselPeriodType type)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	1cfb      	adds	r3, r7, #3
 8001bf8:	701a      	strb	r2, [r3, #0]
	if (type == VcselPeriodPreRange)
 8001bfa:	1cfb      	adds	r3, r7, #3
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10a      	bne.n	8001c18 <VL53L0X_getVcselPulsePeriod+0x2c>
	{
		return decodeVcselPeriod(VL53L0X_readReg(dev,  PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2150      	movs	r1, #80	; 0x50
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff fdcf 	bl	80017aa <VL53L0X_readReg>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	18db      	adds	r3, r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e00f      	b.n	8001c38 <VL53L0X_getVcselPulsePeriod+0x4c>
	}
	else if (type == VcselPeriodFinalRange)
 8001c18:	1cfb      	adds	r3, r7, #3
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d10a      	bne.n	8001c36 <VL53L0X_getVcselPulsePeriod+0x4a>
	{
		return decodeVcselPeriod(VL53L0X_readReg(dev,  FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2170      	movs	r1, #112	; 0x70
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7ff fdc0 	bl	80017aa <VL53L0X_readReg>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	18db      	adds	r3, r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	e000      	b.n	8001c38 <VL53L0X_getVcselPulsePeriod+0x4c>
	}
	else { return 255; }
 8001c36:	23ff      	movs	r3, #255	; 0xff
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <VL53L0X_readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X_readRangeContinuousMillimeters(struct VL53L0X* dev)
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	VL53L0X_startTimeout(dev);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 fae6 	bl	800221c <VL53L0X_startTimeout>
	while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001c50:	e00a      	b.n	8001c68 <VL53L0X_readRangeContinuousMillimeters+0x28>
	{
		if (VL53L0X_checkTimeoutExpired(dev))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 faf9 	bl	800224c <VL53L0X_checkTimeoutExpired>
 8001c5a:	1e03      	subs	r3, r0, #0
 8001c5c:	d004      	beq.n	8001c68 <VL53L0X_readRangeContinuousMillimeters+0x28>
		{
			dev->did_timeout = true;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	721a      	strb	r2, [r3, #8]
			return 65535;
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <VL53L0X_readRangeContinuousMillimeters+0x68>)
 8001c66:	e01a      	b.n	8001c9e <VL53L0X_readRangeContinuousMillimeters+0x5e>
	while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2113      	movs	r1, #19
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff fd9c 	bl	80017aa <VL53L0X_readReg>
 8001c72:	0003      	movs	r3, r0
 8001c74:	001a      	movs	r2, r3
 8001c76:	2307      	movs	r3, #7
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d0ea      	beq.n	8001c52 <VL53L0X_readRangeContinuousMillimeters+0x12>
		}
	}

	// assumptions: Linearity Corrective Gain is 1000 (default);
	// fractional ranging is not enabled
	uint16_t range = VL53L0X_readReg16Bit(dev, RESULT_RANGE_STATUS + 10);
 8001c7c:	250e      	movs	r5, #14
 8001c7e:	197c      	adds	r4, r7, r5
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	211e      	movs	r1, #30
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff fdb0 	bl	80017ea <VL53L0X_readReg16Bit>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	8023      	strh	r3, [r4, #0]

	VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	210b      	movs	r1, #11
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff fd38 	bl	800170a <VL53L0X_writeReg>

	return range;
 8001c9a:	197b      	adds	r3, r7, r5
 8001c9c:	881b      	ldrh	r3, [r3, #0]
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	0000ffff 	.word	0x0000ffff

08001cac <VL53L0X_readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
uint16_t VL53L0X_readRangeSingleMillimeters(struct VL53L0X* dev)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	VL53L0X_writeReg(dev, 0x80, 0x01);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7ff fd25 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	21ff      	movs	r1, #255	; 0xff
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7ff fd1f 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x00, 0x00);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f7ff fd19 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x91, dev->stop_variable);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7c1a      	ldrb	r2, [r3, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2191      	movs	r1, #145	; 0x91
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7ff fd12 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x00, 0x01);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	2100      	movs	r1, #0
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7ff fd0c 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	21ff      	movs	r1, #255	; 0xff
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7ff fd06 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x80, 0x00);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	2180      	movs	r1, #128	; 0x80
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7ff fd00 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, SYSRANGE_START, 0x01);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2100      	movs	r1, #0
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff fcfa 	bl	800170a <VL53L0X_writeReg>

	// "Wait until start bit has been cleared"
	VL53L0X_startTimeout(dev);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 fa7f 	bl	800221c <VL53L0X_startTimeout>
	while (VL53L0X_readReg(dev,  SYSRANGE_START) & 0x01)
 8001d1e:	e00a      	b.n	8001d36 <VL53L0X_readRangeSingleMillimeters+0x8a>
	{
		if (VL53L0X_checkTimeoutExpired(dev))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 fa92 	bl	800224c <VL53L0X_checkTimeoutExpired>
 8001d28:	1e03      	subs	r3, r0, #0
 8001d2a:	d004      	beq.n	8001d36 <VL53L0X_readRangeSingleMillimeters+0x8a>
		{
			dev->did_timeout = true;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	721a      	strb	r2, [r3, #8]
			return 65535;
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <VL53L0X_readRangeSingleMillimeters+0xb0>)
 8001d34:	e00e      	b.n	8001d54 <VL53L0X_readRangeSingleMillimeters+0xa8>
	while (VL53L0X_readReg(dev,  SYSRANGE_START) & 0x01)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2100      	movs	r1, #0
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff fd35 	bl	80017aa <VL53L0X_readReg>
 8001d40:	0003      	movs	r3, r0
 8001d42:	001a      	movs	r2, r3
 8001d44:	2301      	movs	r3, #1
 8001d46:	4013      	ands	r3, r2
 8001d48:	d1ea      	bne.n	8001d20 <VL53L0X_readRangeSingleMillimeters+0x74>
		}
	}

	return VL53L0X_readRangeContinuousMillimeters(dev);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7ff ff77 	bl	8001c40 <VL53L0X_readRangeContinuousMillimeters>
 8001d52:	0003      	movs	r3, r0
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	0000ffff 	.word	0x0000ffff

08001d60 <VL53L0X_getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X_getSpadInfo(struct VL53L0X* dev, uint8_t * count, bool * type_is_aperture)
{
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
	uint8_t tmp;

	VL53L0X_writeReg(dev, 0x80, 0x01);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7ff fcc9 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	21ff      	movs	r1, #255	; 0xff
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f7ff fcc3 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x00, 0x00);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7ff fcbd 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x06);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2206      	movs	r2, #6
 8001d94:	21ff      	movs	r1, #255	; 0xff
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff fcb7 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x83, VL53L0X_readReg(dev,  0x83) | 0x04);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2183      	movs	r1, #131	; 0x83
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff fd02 	bl	80017aa <VL53L0X_readReg>
 8001da6:	0003      	movs	r3, r0
 8001da8:	001a      	movs	r2, r3
 8001daa:	2304      	movs	r3, #4
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2183      	movs	r1, #131	; 0x83
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff fca8 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0xFF, 0x07);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	21ff      	movs	r1, #255	; 0xff
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff fca2 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x81, 0x01);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2181      	movs	r1, #129	; 0x81
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff fc9c 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0x80, 0x01);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2180      	movs	r1, #128	; 0x80
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff fc96 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0x94, 0x6b);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	226b      	movs	r2, #107	; 0x6b
 8001de2:	2194      	movs	r1, #148	; 0x94
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff fc90 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x83, 0x00);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	2183      	movs	r1, #131	; 0x83
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff fc8a 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_startTimeout(dev);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 fa0f 	bl	800221c <VL53L0X_startTimeout>
	while (VL53L0X_readReg(dev,  0x83) == 0x00)
 8001dfe:	e007      	b.n	8001e10 <VL53L0X_getSpadInfo+0xb0>
	{
		if (VL53L0X_checkTimeoutExpired(dev)) { return false; }
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 fa22 	bl	800224c <VL53L0X_checkTimeoutExpired>
 8001e08:	1e03      	subs	r3, r0, #0
 8001e0a:	d001      	beq.n	8001e10 <VL53L0X_getSpadInfo+0xb0>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e05e      	b.n	8001ece <VL53L0X_getSpadInfo+0x16e>
	while (VL53L0X_readReg(dev,  0x83) == 0x00)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2183      	movs	r1, #131	; 0x83
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff fcc8 	bl	80017aa <VL53L0X_readReg>
 8001e1a:	1e03      	subs	r3, r0, #0
 8001e1c:	d0f0      	beq.n	8001e00 <VL53L0X_getSpadInfo+0xa0>
	}
	VL53L0X_writeReg(dev, 0x83, 0x01);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	2183      	movs	r1, #131	; 0x83
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff fc70 	bl	800170a <VL53L0X_writeReg>
	tmp = VL53L0X_readReg(dev,  0x92);
 8001e2a:	2517      	movs	r5, #23
 8001e2c:	197c      	adds	r4, r7, r5
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2192      	movs	r1, #146	; 0x92
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7ff fcb9 	bl	80017aa <VL53L0X_readReg>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	7023      	strb	r3, [r4, #0]

	*count = tmp & 0x7f;
 8001e3c:	0029      	movs	r1, r5
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	227f      	movs	r2, #127	; 0x7f
 8001e44:	4013      	ands	r3, r2
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	09db      	lsrs	r3, r3, #7
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	001a      	movs	r2, r3
 8001e56:	2301      	movs	r3, #1
 8001e58:	4013      	ands	r3, r2
 8001e5a:	1e5a      	subs	r2, r3, #1
 8001e5c:	4193      	sbcs	r3, r2
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	701a      	strb	r2, [r3, #0]

	VL53L0X_writeReg(dev, 0x81, 0x00);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	2181      	movs	r1, #129	; 0x81
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f7ff fc4d 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0xFF, 0x06);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2206      	movs	r2, #6
 8001e74:	21ff      	movs	r1, #255	; 0xff
 8001e76:	0018      	movs	r0, r3
 8001e78:	f7ff fc47 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x83, VL53L0X_readReg(dev,  0x83)  & ~0x04);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2183      	movs	r1, #131	; 0x83
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff fc92 	bl	80017aa <VL53L0X_readReg>
 8001e86:	0003      	movs	r3, r0
 8001e88:	001a      	movs	r2, r3
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	439a      	bics	r2, r3
 8001e8e:	0013      	movs	r3, r2
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2183      	movs	r1, #131	; 0x83
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7ff fc37 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	21ff      	movs	r1, #255	; 0xff
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff fc31 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x00, 0x01);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	2100      	movs	r1, #0
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7ff fc2b 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	21ff      	movs	r1, #255	; 0xff
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7ff fc25 	bl	800170a <VL53L0X_writeReg>
	VL53L0X_writeReg(dev, 0x80, 0x00);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f7ff fc1f 	bl	800170a <VL53L0X_writeReg>

	return true;
 8001ecc:	2301      	movs	r3, #1
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b006      	add	sp, #24
 8001ed4:	bdb0      	pop	{r4, r5, r7, pc}

08001ed6 <VL53L0X_getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X_getSequenceStepEnables(struct VL53L0X* dev, struct VL53L0X_SequenceStepEnables* enables)
{
 8001ed6:	b5b0      	push	{r4, r5, r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
	uint8_t sequence_config = VL53L0X_readReg(dev,  SYSTEM_SEQUENCE_CONFIG);
 8001ee0:	250f      	movs	r5, #15
 8001ee2:	197c      	adds	r4, r7, r5
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff fc5e 	bl	80017aa <VL53L0X_readReg>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	7023      	strb	r3, [r4, #0]

	enables->tcc          = (sequence_config >> 4) & 0x1;
 8001ef2:	0029      	movs	r1, r5
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	001a      	movs	r2, r3
 8001efe:	2301      	movs	r3, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	1e5a      	subs	r2, r3, #1
 8001f04:	4193      	sbcs	r3, r2
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	701a      	strb	r2, [r3, #0]
	enables->dss          = (sequence_config >> 3) & 0x1;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	001a      	movs	r2, r3
 8001f16:	2301      	movs	r3, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	1e5a      	subs	r2, r3, #1
 8001f1c:	4193      	sbcs	r3, r2
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	709a      	strb	r2, [r3, #2]
	enables->msrc         = (sequence_config >> 2) & 0x1;
 8001f24:	187b      	adds	r3, r7, r1
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	2301      	movs	r3, #1
 8001f30:	4013      	ands	r3, r2
 8001f32:	1e5a      	subs	r2, r3, #1
 8001f34:	4193      	sbcs	r3, r2
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	705a      	strb	r2, [r3, #1]
	enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	099b      	lsrs	r3, r3, #6
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	001a      	movs	r2, r3
 8001f46:	2301      	movs	r3, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	1e5a      	subs	r2, r3, #1
 8001f4c:	4193      	sbcs	r3, r2
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	70da      	strb	r2, [r3, #3]
	enables->final_range  = (sequence_config >> 7) & 0x1;
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	09db      	lsrs	r3, r3, #7
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	2301      	movs	r3, #1
 8001f60:	4013      	ands	r3, r2
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	4193      	sbcs	r3, r2
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	711a      	strb	r2, [r3, #4]
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b004      	add	sp, #16
 8001f72:	bdb0      	pop	{r4, r5, r7, pc}

08001f74 <VL53L0X_getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X_getSequenceStepTimeouts(struct VL53L0X* dev, struct VL53L0X_SequenceStepEnables* enables, struct VL53L0X_SequenceStepTimeouts* timeouts)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	timeouts->pre_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(dev, VcselPeriodPreRange);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2100      	movs	r1, #0
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7ff fe31 	bl	8001bec <VL53L0X_getVcselPulsePeriod>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	801a      	strh	r2, [r3, #0]

	timeouts->msrc_dss_tcc_mclks = VL53L0X_readReg(dev,  MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2146      	movs	r1, #70	; 0x46
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7ff fc07 	bl	80017aa <VL53L0X_readReg>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	809a      	strh	r2, [r3, #4]
	timeouts->msrc_dss_tcc_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks, timeouts->pre_range_vcsel_period_pclks);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	889a      	ldrh	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	0010      	movs	r0, r2
 8001fb6:	f000 f898 	bl	80020ea <VL53L0X_timeoutMclksToMicroseconds>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	60da      	str	r2, [r3, #12]

	timeouts->pre_range_mclks = VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(dev, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2151      	movs	r1, #81	; 0x51
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7ff fc10 	bl	80017ea <VL53L0X_readReg16Bit>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 f842 	bl	8002056 <VL53L0X_decodeTimeout>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	80da      	strh	r2, [r3, #6]
	timeouts->pre_range_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->pre_range_mclks, timeouts->pre_range_vcsel_period_pclks);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	88da      	ldrh	r2, [r3, #6]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	0010      	movs	r0, r2
 8001fe8:	f000 f87f 	bl	80020ea <VL53L0X_timeoutMclksToMicroseconds>
 8001fec:	0002      	movs	r2, r0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	611a      	str	r2, [r3, #16]

	timeouts->final_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(dev, VcselPeriodFinalRange);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7ff fdf8 	bl	8001bec <VL53L0X_getVcselPulsePeriod>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	805a      	strh	r2, [r3, #2]

	timeouts->final_range_mclks = VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2171      	movs	r1, #113	; 0x71
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff fbee 	bl	80017ea <VL53L0X_readReg16Bit>
 800200e:	0003      	movs	r3, r0
 8002010:	0018      	movs	r0, r3
 8002012:	f000 f820 	bl	8002056 <VL53L0X_decodeTimeout>
 8002016:	0003      	movs	r3, r0
 8002018:	001a      	movs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	811a      	strh	r2, [r3, #8]

	if (enables->pre_range)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	78db      	ldrb	r3, [r3, #3]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <VL53L0X_getSequenceStepTimeouts+0xc2>
	{
		timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	891a      	ldrh	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	88db      	ldrh	r3, [r3, #6]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	b29a      	uxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	811a      	strh	r2, [r3, #8]
	}

	timeouts->final_range_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->final_range_mclks, timeouts->final_range_vcsel_period_pclks);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	891a      	ldrh	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	885b      	ldrh	r3, [r3, #2]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	0019      	movs	r1, r3
 8002042:	0010      	movs	r0, r2
 8002044:	f000 f851 	bl	80020ea <VL53L0X_timeoutMclksToMicroseconds>
 8002048:	0002      	movs	r2, r0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	615a      	str	r2, [r3, #20]
}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b004      	add	sp, #16
 8002054:	bd80      	pop	{r7, pc}

08002056 <VL53L0X_decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X_decodeTimeout(uint16_t reg_val)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	0002      	movs	r2, r0
 800205e:	1dbb      	adds	r3, r7, #6
 8002060:	801a      	strh	r2, [r3, #0]
	// format: "(LSByte * 2^MSByte) + 1"
	return (uint16_t)((reg_val & 0x00FF) <<
 8002062:	1dbb      	adds	r3, r7, #6
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	22ff      	movs	r2, #255	; 0xff
 8002068:	4013      	ands	r3, r2
			(uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800206a:	1dba      	adds	r2, r7, #6
 800206c:	8812      	ldrh	r2, [r2, #0]
 800206e:	0a12      	lsrs	r2, r2, #8
 8002070:	b292      	uxth	r2, r2
	return (uint16_t)((reg_val & 0x00FF) <<
 8002072:	4093      	lsls	r3, r2
 8002074:	b29b      	uxth	r3, r3
			(uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002076:	3301      	adds	r3, #1
 8002078:	b29b      	uxth	r3, r3
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b002      	add	sp, #8
 8002080:	bd80      	pop	{r7, pc}

08002082 <VL53L0X_encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t VL53L0X_encodeTimeout(uint16_t timeout_mclks)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	0002      	movs	r2, r0
 800208a:	1dbb      	adds	r3, r7, #6
 800208c:	801a      	strh	r2, [r3, #0]
	// format: "(LSByte * 2^MSByte) + 1"

	uint32_t ls_byte = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
	uint16_t ms_byte = 0;
 8002092:	230a      	movs	r3, #10
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	2200      	movs	r2, #0
 8002098:	801a      	strh	r2, [r3, #0]

	if (timeout_mclks > 0)
 800209a:	1dbb      	adds	r3, r7, #6
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01e      	beq.n	80020e0 <VL53L0X_encodeTimeout+0x5e>
	{
		ls_byte = timeout_mclks - 1;
 80020a2:	1dbb      	adds	r3, r7, #6
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]

		while ((ls_byte & 0xFFFFFF00) > 0)
 80020aa:	e008      	b.n	80020be <VL53L0X_encodeTimeout+0x3c>
		{
			ls_byte >>= 1;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	085b      	lsrs	r3, r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
			ms_byte++;
 80020b2:	210a      	movs	r1, #10
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	881a      	ldrh	r2, [r3, #0]
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	3201      	adds	r2, #1
 80020bc:	801a      	strh	r2, [r3, #0]
		while ((ls_byte & 0xFFFFFF00) > 0)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	22ff      	movs	r2, #255	; 0xff
 80020c2:	4393      	bics	r3, r2
 80020c4:	d1f2      	bne.n	80020ac <VL53L0X_encodeTimeout+0x2a>
		}

		return (ms_byte << 8) | (ls_byte & 0xFF);
 80020c6:	230a      	movs	r3, #10
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	21ff      	movs	r1, #255	; 0xff
 80020d6:	400b      	ands	r3, r1
 80020d8:	b29b      	uxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	e000      	b.n	80020e2 <VL53L0X_encodeTimeout+0x60>
	}
	else { return 0; }
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b004      	add	sp, #16
 80020e8:	bd80      	pop	{r7, pc}

080020ea <VL53L0X_timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X_timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	0002      	movs	r2, r0
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	801a      	strh	r2, [r3, #0]
 80020f6:	1d7b      	adds	r3, r7, #5
 80020f8:	1c0a      	adds	r2, r1, #0
 80020fa:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80020fc:	1d7b      	adds	r3, r7, #5
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	0013      	movs	r3, r2
 8002102:	015b      	lsls	r3, r3, #5
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	015b      	lsls	r3, r3, #5
 8002108:	189b      	adds	r3, r3, r2
 800210a:	011a      	lsls	r2, r3, #4
 800210c:	1ad2      	subs	r2, r2, r3
 800210e:	0213      	lsls	r3, r2, #8
 8002110:	001a      	movs	r2, r3
 8002112:	0013      	movs	r3, r2
 8002114:	33f5      	adds	r3, #245	; 0xf5
 8002116:	33ff      	adds	r3, #255	; 0xff
 8002118:	22fa      	movs	r2, #250	; 0xfa
 800211a:	0091      	lsls	r1, r2, #2
 800211c:	0018      	movs	r0, r3
 800211e:	f7fd fff3 	bl	8000108 <__udivsi3>
 8002122:	0003      	movs	r3, r0
 8002124:	60fb      	str	r3, [r7, #12]

	return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8002126:	1dbb      	adds	r3, r7, #6
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	435a      	muls	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	18d3      	adds	r3, r2, r3
 8002134:	22fa      	movs	r2, #250	; 0xfa
 8002136:	0091      	lsls	r1, r2, #2
 8002138:	0018      	movs	r0, r3
 800213a:	f7fd ffe5 	bl	8000108 <__udivsi3>
 800213e:	0003      	movs	r3, r0
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b004      	add	sp, #16
 8002146:	bd80      	pop	{r7, pc}

08002148 <VL53L0X_timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X_timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	000a      	movs	r2, r1
 8002152:	1cfb      	adds	r3, r7, #3
 8002154:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002156:	1cfb      	adds	r3, r7, #3
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	0013      	movs	r3, r2
 800215c:	015b      	lsls	r3, r3, #5
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	015b      	lsls	r3, r3, #5
 8002162:	189b      	adds	r3, r3, r2
 8002164:	011a      	lsls	r2, r3, #4
 8002166:	1ad2      	subs	r2, r2, r3
 8002168:	0213      	lsls	r3, r2, #8
 800216a:	001a      	movs	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	33f5      	adds	r3, #245	; 0xf5
 8002170:	33ff      	adds	r3, #255	; 0xff
 8002172:	22fa      	movs	r2, #250	; 0xfa
 8002174:	0091      	lsls	r1, r2, #2
 8002176:	0018      	movs	r0, r3
 8002178:	f7fd ffc6 	bl	8000108 <__udivsi3>
 800217c:	0003      	movs	r3, r0
 800217e:	60fb      	str	r3, [r7, #12]

	return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	0013      	movs	r3, r2
 8002184:	015b      	lsls	r3, r3, #5
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	189b      	adds	r3, r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	001a      	movs	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	085b      	lsrs	r3, r3, #1
 8002194:	18d3      	adds	r3, r2, r3
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	0018      	movs	r0, r3
 800219a:	f7fd ffb5 	bl	8000108 <__udivsi3>
 800219e:	0003      	movs	r3, r0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b004      	add	sp, #16
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <VL53L0X_performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X_performSingleRefCalibration(struct VL53L0X* dev, uint8_t vhv_init_byte)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	000a      	movs	r2, r1
 80021b2:	1cfb      	adds	r3, r7, #3
 80021b4:	701a      	strb	r2, [r3, #0]
	VL53L0X_writeReg(dev, SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80021b6:	1cfb      	adds	r3, r7, #3
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2201      	movs	r2, #1
 80021bc:	4313      	orrs	r3, r2
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2100      	movs	r1, #0
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7ff faa0 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_startTimeout(dev);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 f825 	bl	800221c <VL53L0X_startTimeout>
	while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80021d2:	e007      	b.n	80021e4 <VL53L0X_performSingleRefCalibration+0x3c>
	{
		if (VL53L0X_checkTimeoutExpired(dev)) { return false; }
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 f838 	bl	800224c <VL53L0X_checkTimeoutExpired>
 80021dc:	1e03      	subs	r3, r0, #0
 80021de:	d001      	beq.n	80021e4 <VL53L0X_performSingleRefCalibration+0x3c>
 80021e0:	2300      	movs	r3, #0
 80021e2:	e016      	b.n	8002212 <VL53L0X_performSingleRefCalibration+0x6a>
	while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2113      	movs	r1, #19
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7ff fade 	bl	80017aa <VL53L0X_readReg>
 80021ee:	0003      	movs	r3, r0
 80021f0:	001a      	movs	r2, r3
 80021f2:	2307      	movs	r3, #7
 80021f4:	4013      	ands	r3, r2
 80021f6:	d0ed      	beq.n	80021d4 <VL53L0X_performSingleRefCalibration+0x2c>
	}

	VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	210b      	movs	r1, #11
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff fa83 	bl	800170a <VL53L0X_writeReg>

	VL53L0X_writeReg(dev, SYSRANGE_START, 0x00);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	0018      	movs	r0, r3
 800220c:	f7ff fa7d 	bl	800170a <VL53L0X_writeReg>

	return true;
 8002210:	2301      	movs	r3, #1
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b002      	add	sp, #8
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <VL53L0X_startTimeout>:


void VL53L0X_startTimeout(struct VL53L0X* dev){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	dev->timeout_start_ms = ulDelay_timeMs;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <VL53L0X_startTimeout+0x2c>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
	/* prevent systick overflow */
	if(dev->timeout_start_ms > (0xFFFFFFFF - dev->io_timeout))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	43db      	mvns	r3, r3
 8002236:	429a      	cmp	r2, r3
 8002238:	d902      	bls.n	8002240 <VL53L0X_startTimeout+0x24>
	{
		dev->timeout_start_ms = 0u;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	60da      	str	r2, [r3, #12]
	}
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000034 	.word	0x20000034

0800224c <VL53L0X_checkTimeoutExpired>:

bool VL53L0X_checkTimeoutExpired(struct VL53L0X* dev){
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	return ((dev->io_timeout > 0) && ((ulDelay_timeMs - dev->timeout_start_ms) > dev->io_timeout) && (ulDelay_timeMs < (0xFFFFFFFF - dev->io_timeout)));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d011      	beq.n	8002280 <VL53L0X_checkTimeoutExpired+0x34>
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <VL53L0X_checkTimeoutExpired+0x48>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	1ad2      	subs	r2, r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	d908      	bls.n	8002280 <VL53L0X_checkTimeoutExpired+0x34>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	43da      	mvns	r2, r3
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <VL53L0X_checkTimeoutExpired+0x48>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d901      	bls.n	8002280 <VL53L0X_checkTimeoutExpired+0x34>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <VL53L0X_checkTimeoutExpired+0x36>
 8002280:	2300      	movs	r3, #0
 8002282:	1c1a      	adds	r2, r3, #0
 8002284:	2301      	movs	r3, #1
 8002286:	4013      	ands	r3, r2
 8002288:	b2db      	uxtb	r3, r3
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b002      	add	sp, #8
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	20000034 	.word	0x20000034

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	0002      	movs	r2, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	1dfb      	adds	r3, r7, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b7f      	cmp	r3, #127	; 0x7f
 80022ac:	d828      	bhi.n	8002300 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ae:	4a2f      	ldr	r2, [pc, #188]	; (800236c <__NVIC_SetPriority+0xd4>)
 80022b0:	1dfb      	adds	r3, r7, #7
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	33c0      	adds	r3, #192	; 0xc0
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	589b      	ldr	r3, [r3, r2]
 80022be:	1dfa      	adds	r2, r7, #7
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	0011      	movs	r1, r2
 80022c4:	2203      	movs	r2, #3
 80022c6:	400a      	ands	r2, r1
 80022c8:	00d2      	lsls	r2, r2, #3
 80022ca:	21ff      	movs	r1, #255	; 0xff
 80022cc:	4091      	lsls	r1, r2
 80022ce:	000a      	movs	r2, r1
 80022d0:	43d2      	mvns	r2, r2
 80022d2:	401a      	ands	r2, r3
 80022d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	019b      	lsls	r3, r3, #6
 80022da:	22ff      	movs	r2, #255	; 0xff
 80022dc:	401a      	ands	r2, r3
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	0018      	movs	r0, r3
 80022e4:	2303      	movs	r3, #3
 80022e6:	4003      	ands	r3, r0
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ec:	481f      	ldr	r0, [pc, #124]	; (800236c <__NVIC_SetPriority+0xd4>)
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	430a      	orrs	r2, r1
 80022f8:	33c0      	adds	r3, #192	; 0xc0
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022fe:	e031      	b.n	8002364 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002300:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <__NVIC_SetPriority+0xd8>)
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	0019      	movs	r1, r3
 8002308:	230f      	movs	r3, #15
 800230a:	400b      	ands	r3, r1
 800230c:	3b08      	subs	r3, #8
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3306      	adds	r3, #6
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	18d3      	adds	r3, r2, r3
 8002316:	3304      	adds	r3, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	1dfa      	adds	r2, r7, #7
 800231c:	7812      	ldrb	r2, [r2, #0]
 800231e:	0011      	movs	r1, r2
 8002320:	2203      	movs	r2, #3
 8002322:	400a      	ands	r2, r1
 8002324:	00d2      	lsls	r2, r2, #3
 8002326:	21ff      	movs	r1, #255	; 0xff
 8002328:	4091      	lsls	r1, r2
 800232a:	000a      	movs	r2, r1
 800232c:	43d2      	mvns	r2, r2
 800232e:	401a      	ands	r2, r3
 8002330:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	22ff      	movs	r2, #255	; 0xff
 8002338:	401a      	ands	r2, r3
 800233a:	1dfb      	adds	r3, r7, #7
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	0018      	movs	r0, r3
 8002340:	2303      	movs	r3, #3
 8002342:	4003      	ands	r3, r0
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002348:	4809      	ldr	r0, [pc, #36]	; (8002370 <__NVIC_SetPriority+0xd8>)
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	001c      	movs	r4, r3
 8002350:	230f      	movs	r3, #15
 8002352:	4023      	ands	r3, r4
 8002354:	3b08      	subs	r3, #8
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	430a      	orrs	r2, r1
 800235a:	3306      	adds	r3, #6
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	18c3      	adds	r3, r0, r3
 8002360:	3304      	adds	r3, #4
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b003      	add	sp, #12
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	1e5a      	subs	r2, r3, #1
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	045b      	lsls	r3, r3, #17
 8002384:	429a      	cmp	r2, r3
 8002386:	d301      	bcc.n	800238c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002388:	2301      	movs	r3, #1
 800238a:	e010      	b.n	80023ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <SysTick_Config+0x44>)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	3a01      	subs	r2, #1
 8002392:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002394:	2301      	movs	r3, #1
 8002396:	425b      	negs	r3, r3
 8002398:	2103      	movs	r1, #3
 800239a:	0018      	movs	r0, r3
 800239c:	f7ff ff7c 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SysTick_Config+0x44>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <SysTick_Config+0x44>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b002      	add	sp, #8
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	e000e010 	.word	0xe000e010

080023bc <delay_vInit>:
 *  Author: Constantin Iustin
 */
#include "delay.h"

void delay_vInit(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	SysTick_Config(32000000/1000); 	/*Set up a systick interrupt every millisecond */
 80023c0:	23fa      	movs	r3, #250	; 0xfa
 80023c2:	01db      	lsls	r3, r3, #7
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7ff ffd5 	bl	8002374 <SysTick_Config>
	ulDelay_timeMs = 0u;
 80023ca:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <delay_vInit+0x1c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	20000034 	.word	0x20000034

080023dc <SysTick_Handler>:
{
	ulDelay_timeMs = 0u;
	while(ulDelay_timeMs < time_ms);
}

void SysTick_Handler(void)  {                               /* SysTick interrupt Handler. */
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	ulDelay_timeMs++;
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <SysTick_Handler+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <SysTick_Handler+0x14>)
 80023e8:	601a      	str	r2, [r3, #0]
}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000034 	.word	0x20000034

080023f4 <__NVIC_EnableIRQ>:
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	0002      	movs	r2, r0
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002400:	1dfb      	adds	r3, r7, #7
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b7f      	cmp	r3, #127	; 0x7f
 8002406:	d809      	bhi.n	800241c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	001a      	movs	r2, r3
 800240e:	231f      	movs	r3, #31
 8002410:	401a      	ands	r2, r3
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <__NVIC_EnableIRQ+0x30>)
 8002414:	2101      	movs	r1, #1
 8002416:	4091      	lsls	r1, r2
 8002418:	000a      	movs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}
 8002424:	e000e100 	.word	0xe000e100

08002428 <main>:

void OS_vClockConfiguration(void);
void OS_vTimerConfig(void);

int main(void)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
	uint16_t valueVl53l0x = 0u;
 800242e:	1dbb      	adds	r3, r7, #6
 8002430:	2200      	movs	r2, #0
 8002432:	801a      	strh	r2, [r3, #0]
	readVl53l0x = 0u;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <main+0x54>)
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
	OS_vClockConfiguration();
 800243a:	f000 f825 	bl	8002488 <OS_vClockConfiguration>
	OS_vTimerConfig();
 800243e:	f000 f84f 	bl	80024e0 <OS_vTimerConfig>
	I2c_vInit();
 8002442:	f7fe fcc1 	bl	8000dc8 <I2c_vInit>
	delay_vInit();
 8002446:	f7ff ffb9 	bl	80023bc <delay_vInit>

	VL53L0X_init(&myTOFsensor);
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <main+0x58>)
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe fdeb 	bl	8001028 <VL53L0X_init>
	VL53L0X_setMeasurementTimingBudget(&myTOFsensor, 200000);
 8002452:	4a0c      	ldr	r2, [pc, #48]	; (8002484 <main+0x5c>)
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <main+0x58>)
 8002456:	0011      	movs	r1, r2
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff fa6b 	bl	8001934 <VL53L0X_setMeasurementTimingBudget>

	while(1)
	{
		/* read distance in mm every second*/
		if(readVl53l0x == 1u)
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <main+0x54>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d1fb      	bne.n	800245e <main+0x36>
		{
			valueVl53l0x = VL53L0X_readRangeSingleMillimeters(&myTOFsensor);
 8002466:	1dbc      	adds	r4, r7, #6
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <main+0x58>)
 800246a:	0018      	movs	r0, r3
 800246c:	f7ff fc1e 	bl	8001cac <VL53L0X_readRangeSingleMillimeters>
 8002470:	0003      	movs	r3, r0
 8002472:	8023      	strh	r3, [r4, #0]
			readVl53l0x = 0u;
 8002474:	4b01      	ldr	r3, [pc, #4]	; (800247c <main+0x54>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
		if(readVl53l0x == 1u)
 800247a:	e7f0      	b.n	800245e <main+0x36>
 800247c:	20000038 	.word	0x20000038
 8002480:	20000000 	.word	0x20000000
 8002484:	00030d40 	.word	0x00030d40

08002488 <OS_vClockConfiguration>:
		}
	}
}

void OS_vClockConfiguration(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	/* Configure clock @32MHz*/
	RCC->CFGR = RCC_CFGR_PLLMUL8;								/* Set PLL multiplication factor to 8 	*/
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <OS_vClockConfiguration+0x54>)
 800248e:	22c0      	movs	r2, #192	; 0xc0
 8002490:	0352      	lsls	r2, r2, #13
 8002492:	605a      	str	r2, [r3, #4]
																/* Set PLL input clock source to HSI/2 	*/
																/* Select system clock source to PLL 	*/
	RCC->CR = RCC_CR_PLLON;										/* Enable PLLCLK 						*/
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <OS_vClockConfiguration+0x54>)
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	0452      	lsls	r2, r2, #17
 800249a:	601a      	str	r2, [r3, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);	    				/* Wait until PLLCLK  is ready 			*/
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <OS_vClockConfiguration+0x54>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	049b      	lsls	r3, r3, #18
 80024a6:	4013      	ands	r3, r2
 80024a8:	d0f9      	beq.n	800249e <OS_vClockConfiguration+0x16>

	RCC->CFGR |= RCC_CFGR_SW_PLL; 								/* Select PLL as system clock 			*/
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <OS_vClockConfiguration+0x54>)
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <OS_vClockConfiguration+0x54>)
 80024b0:	2102      	movs	r1, #2
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); 	/* Wait until the PLL is switched on 	*/
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <OS_vClockConfiguration+0x54>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	220c      	movs	r2, #12
 80024be:	4013      	ands	r3, r2
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d1f9      	bne.n	80024b8 <OS_vClockConfiguration+0x30>

	RCC->APB2ENR = RCC_APB2ENR_DBGMCUEN|RCC_APB2ENR_TIM16EN;	/* Enable MCU debug mode 				*/
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <OS_vClockConfiguration+0x54>)
 80024c6:	2284      	movs	r2, #132	; 0x84
 80024c8:	03d2      	lsls	r2, r2, #15
 80024ca:	619a      	str	r2, [r3, #24]
																/* Enable TIM16 OS clock 				*/
	RCC->APB1ENR = RCC_APB1ENR_PWREN;							/* Set the Power Enable  				*/
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <OS_vClockConfiguration+0x54>)
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	0552      	lsls	r2, r2, #21
 80024d2:	61da      	str	r2, [r3, #28]
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	40021000 	.word	0x40021000

080024e0 <OS_vTimerConfig>:

void OS_vTimerConfig(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	TIM16->EGR = TIM_EGR_UG;									/* Reset/update of TIM16				*/
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <OS_vTimerConfig+0x30>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	615a      	str	r2, [r3, #20]

	/* Set timer's period to 1sec @32MHz		*/
	TIM16->PSC = 999;											/* Prescaler							*/
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <OS_vTimerConfig+0x30>)
 80024ec:	4a09      	ldr	r2, [pc, #36]	; (8002514 <OS_vTimerConfig+0x34>)
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->ARR = 32000;											/* auto-reload							*/
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <OS_vTimerConfig+0x30>)
 80024f2:	22fa      	movs	r2, #250	; 0xfa
 80024f4:	01d2      	lsls	r2, r2, #7
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM16->DIER = TIM_DIER_UIE;									/* Enable interrupt						*/
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <OS_vTimerConfig+0x30>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	60da      	str	r2, [r3, #12]
	TIM16->CR1 = TIM_CR1_CEN;									/* Enable timer							*/
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <OS_vTimerConfig+0x30>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(TIM16_IRQn);									/* Enable interruption for TIM16		*/
 8002504:	2015      	movs	r0, #21
 8002506:	f7ff ff75 	bl	80023f4 <__NVIC_EnableIRQ>
}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40014400 	.word	0x40014400
 8002514:	000003e7 	.word	0x000003e7

08002518 <TIM16_IRQHandler>:

void TIM16_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	/* if UIF flag is set */
	if(TIM16->SR & TIM_SR_UIF)
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <TIM16_IRQHandler+0x28>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2201      	movs	r2, #1
 8002522:	4013      	ands	r3, r2
 8002524:	d008      	beq.n	8002538 <TIM16_IRQHandler+0x20>
	{
		/* clear UIF flag */
		TIM16->SR &= ~TIM_SR_UIF;
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <TIM16_IRQHandler+0x28>)
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <TIM16_IRQHandler+0x28>)
 800252c:	2101      	movs	r1, #1
 800252e:	438a      	bics	r2, r1
 8002530:	611a      	str	r2, [r3, #16]
		readVl53l0x = 1u;
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <TIM16_IRQHandler+0x2c>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
	}
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	40014400 	.word	0x40014400
 8002544:	20000038 	.word	0x20000038

08002548 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002548:	480d      	ldr	r0, [pc, #52]	; (8002580 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800254a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800254c:	e000      	b.n	8002550 <Reset_Handler+0x8>
 800254e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <LoopForever+0x6>)
  ldr r1, =_edata
 8002552:	490d      	ldr	r1, [pc, #52]	; (8002588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002554:	4a0d      	ldr	r2, [pc, #52]	; (800258c <LoopForever+0xe>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002558:	e002      	b.n	8002560 <LoopCopyDataInit>

0800255a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800255c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255e:	3304      	adds	r3, #4

08002560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002564:	d3f9      	bcc.n	800255a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002568:	4c0a      	ldr	r4, [pc, #40]	; (8002594 <LoopForever+0x16>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800256c:	e001      	b.n	8002572 <LoopFillZerobss>

0800256e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002570:	3204      	adds	r2, #4

08002572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002574:	d3fb      	bcc.n	800256e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002576:	f000 f811 	bl	800259c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800257a:	f7ff ff55 	bl	8002428 <main>

0800257e <LoopForever>:

LoopForever:
    b LoopForever
 800257e:	e7fe      	b.n	800257e <LoopForever>
  ldr   r0, =_estack
 8002580:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002588:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800258c:	08002644 	.word	0x08002644
  ldr r2, =_sbss
 8002590:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002594:	2000003c 	.word	0x2000003c

08002598 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC_COMP_IRQHandler>
	...

0800259c <__libc_init_array>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	2600      	movs	r6, #0
 80025a0:	4d0c      	ldr	r5, [pc, #48]	; (80025d4 <__libc_init_array+0x38>)
 80025a2:	4c0d      	ldr	r4, [pc, #52]	; (80025d8 <__libc_init_array+0x3c>)
 80025a4:	1b64      	subs	r4, r4, r5
 80025a6:	10a4      	asrs	r4, r4, #2
 80025a8:	42a6      	cmp	r6, r4
 80025aa:	d109      	bne.n	80025c0 <__libc_init_array+0x24>
 80025ac:	2600      	movs	r6, #0
 80025ae:	f000 f819 	bl	80025e4 <_init>
 80025b2:	4d0a      	ldr	r5, [pc, #40]	; (80025dc <__libc_init_array+0x40>)
 80025b4:	4c0a      	ldr	r4, [pc, #40]	; (80025e0 <__libc_init_array+0x44>)
 80025b6:	1b64      	subs	r4, r4, r5
 80025b8:	10a4      	asrs	r4, r4, #2
 80025ba:	42a6      	cmp	r6, r4
 80025bc:	d105      	bne.n	80025ca <__libc_init_array+0x2e>
 80025be:	bd70      	pop	{r4, r5, r6, pc}
 80025c0:	00b3      	lsls	r3, r6, #2
 80025c2:	58eb      	ldr	r3, [r5, r3]
 80025c4:	4798      	blx	r3
 80025c6:	3601      	adds	r6, #1
 80025c8:	e7ee      	b.n	80025a8 <__libc_init_array+0xc>
 80025ca:	00b3      	lsls	r3, r6, #2
 80025cc:	58eb      	ldr	r3, [r5, r3]
 80025ce:	4798      	blx	r3
 80025d0:	3601      	adds	r6, #1
 80025d2:	e7f2      	b.n	80025ba <__libc_init_array+0x1e>
 80025d4:	0800263c 	.word	0x0800263c
 80025d8:	0800263c 	.word	0x0800263c
 80025dc:	0800263c 	.word	0x0800263c
 80025e0:	08002640 	.word	0x08002640

080025e4 <_init>:
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ea:	bc08      	pop	{r3}
 80025ec:	469e      	mov	lr, r3
 80025ee:	4770      	bx	lr

080025f0 <_fini>:
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f6:	bc08      	pop	{r3}
 80025f8:	469e      	mov	lr, r3
 80025fa:	4770      	bx	lr
